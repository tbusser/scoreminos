{"version":3,"sources":["webpack://scoreminos/./src/scripts/03-modules/NavigationManager.ts","webpack://scoreminos/./src/scripts/02-utilities/decorators/bind.ts","webpack://scoreminos/./src/scripts/03-modules/Player.ts","webpack://scoreminos/./src/scripts/03-modules/PlayerManager.ts","webpack://scoreminos/./src/scripts/01-global/enum.ts","webpack://scoreminos/./src/scripts/03-modules/rules.ts","webpack://scoreminos/./src/scripts/03-modules/scoring.ts","webpack://scoreminos/./src/scripts/04-components/Dialog.ts","webpack://scoreminos/./src/scripts/02-utilities/dom.ts","webpack://scoreminos/./src/scripts/04-components/Header.ts","webpack://scoreminos/./src/scripts/04-components/Footer.ts","webpack://scoreminos/./src/scripts/04-components/BaseController.ts","webpack://scoreminos/./src/scripts/04-components/PlayerInput/PlayerInput.ts","webpack://scoreminos/./src/scripts/03-modules/error-message.ts","webpack://scoreminos/./src/scripts/05-widgets/controllers/GameStartController.ts","webpack://scoreminos/./src/scripts/05-widgets/controllers/PlayerSelectController.ts","webpack://scoreminos/./src/scripts/03-modules/fly-out.ts","webpack://scoreminos/./src/scripts/04-components/NumberPad.ts","webpack://scoreminos/./src/scripts/04-components/NumberEntry.ts","webpack://scoreminos/./src/scripts/05-widgets/controllers/PointCollectionController.ts","webpack://scoreminos/./src/scripts/05-widgets/controllers/PointLimitController.ts","webpack://scoreminos/./src/scripts/04-components/CheckboxGroup.ts","webpack://scoreminos/./src/scripts/04-components/TurnInput/TurnInput.ts","webpack://scoreminos/./src/scripts/05-widgets/controllers/RoundController.ts","webpack://scoreminos/./src/scripts/03-modules/leaderboard.ts","webpack://scoreminos/./src/scripts/05-widgets/controllers/LeaderboardController.ts","webpack://scoreminos/./src/scripts/04-components/TimedButton.ts","webpack://scoreminos/./src/scripts/main.ts"],"names":["NavigationManager","steps","config","this","setup","findIndex","step","id","activeStepId","setVisibility","onInstanceActivated","call","instance","instanceFactory","firstStep","activateStep","isVisible","getInstance","activeIndex","undefined","deactivateStep","length","find","bind","target","propertyKey","descriptor","value","TypeError","configurable","get","bound","Object","defineProperty","writable","Player","name","tileCount","_id","Symbol","_tiles","_score","delta","TurnType","Shape","singletonEnforcer","PlayerManager","enforcer","_instance","createPlayerSummary","_activePlayer","player","_players","reduce","result","score","map","hasEmptyHand","isActive","players","names","initialTileCount","updateScore","updateTileCount","initialTiles","shapeBonus","Bridge","DoubleSided","Hexagon","getDrawnTilesPenalty","tilesDrawn","dummyWinner","points","Infinity","calculateScore","turn","turnType","Default","shape","completedShape","scoreDefaultTurn","RoundStart","isTriple","scoreRoundStart","calculateTileDelta","baseSelector","cssClass","selector","closeTrigger","container","portal","Dialog","hideDialog","querySelector","addEventListener","onClose","content","placeholders","keys","forEach","element","textContent","template","document","getElementById","firstElementChild","cloneNode","classList","remove","removeChild","closeCallback","options","getDialogContent","fillPlaceholders","appendChild","bindCloseEvent","onBeforeShow","add","classByPredicate","predicate","manipulation","subtitle","title","Header","base","_subtitle","updateSubtitle","_title","hasSubtitle","buttonPrimary","buttonSecondary","Footer","bindEvents","primaryButton","onPrimaryButtonClicked","secondaryButton","onSecondaryButtonClicked","event","onPerformPrimaryAction","onPerformSecondaryAction","disabled","BaseController","setupBase","hidden","headerBase","headerBaseSelector","footerBase","footerBaseSelector","header","footer","onPrimaryAction","onSecondaryAction","PlayerInput","getPlayerNames","inputs","querySelectorAll","Array","from","input","trim","filter","defaultConfig","messageSelector","scrollToVisible","updateMessageVisibility","scope","visibleIds","configuration","messages","message","includes","firstMessage","scrollIntoView","behavior","GameStartController","playerNames","playerInput","isValid","updateWarningVisibility","onPlayersSelected","playerInputBase","playerInputSelector","hide","warningId","PlayerSelectController","_round","Number","isFinite","updateHeader","onCancel","selectedPlayer","getSelectedPlayer","onPlayerSelected","selectedInput","summary","listElement","selectors","nameList","innerHTML","renderPlayer","join","round","index","renderPlayersList","FlyOut","attributeName","button","NumberPad","callback","_value","parseInt","toString","onClick","closest","hasAttribute","processAction","getAttribute","processValue","selectedAction","slice","reset","NumberEntry","numberPad","showPoints","onPointsChanged","display","numberPadBase","defaultPoints","attribute","PointCollectionController","playerId","numberEntry","primaryEnabled","flyIn","show","translations","headerPrompt","getPlayersWithoutPoints","onPointsCollected","playerList","flyInBase","flyOut","numberEntryBase","setPointsButton","setPoints","onSetPoints","onClicked","PointLimitController","pointsValidation","setLimit","minimum","maximum","onLimitSet","CheckboxGroup","selectedCheckbox","onCheckboxSelected","checkbox","checked","selectedValue","initialCheckbox","RoundCompletedReason","RoundType","form","playedTriple","playedTripleContainer","TurnInput","convertInputToObject","_turnType","newState","updateVisualState","hasPlayedTriple","medals","createBody","includeTiles","ranking","temp","sort","a","b","rankPlayers","rows","place","medal","createLeaderboard","playerManager","RoundController","_roundType","turnInput","Collection","processPlayerInput","leaderboard","leaderboardFlyout","activePlayer","activateNextPlayer","passedTurnsStreak","maxPassedTurnStreak","goToNextPlayer","onRoundCompleted","RoundLocked","roundType","RoundWon","turnSummary","scoreDelta","tileDelta","scoreTurn","updateActivePlayerScore","updateActivePlayerTileCount","onTurnSubmitted","processPassedTurn","processPlayedTurn","turnBase","flyOutBase","flyOutClose","startingPlayerId","setActivePlayer","LeaderboardController","onStartNewGame","board","StepId","TimedButton","onTimeOut","propertyName","limitReached","pointsLimit","roundReason","startingPlayer","dialog","navigationManager","Names","PointsLimit","PlayerSelect","Round","Leaderboard","initLeaderboardController","initGameStartController","onStartingPlayerSelected","initPlayerSelectController","onPointLimitSet","initPointLimitController","initRoundController","setPlayers","showLeaderboard","start","goBack","playerCount","correctedIndex","Math","min","max","createPlayers","goForward","winner","remainingPoints","entry","total","awardRemainingPoints","updatePlayerScore","showDialog","setTimeout","showGameWinnerDialog","goTo","showRoundWinnerDialog","canShowLimitDialog","showLastRoundDialog","formattedDelta","timedButton","showTurnPlayedDialog","firstRankedPlayer","limit"],"mappings":"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","file":"js/main.c0afbc6e.js","sourcesContent":["import { BaseController } from '04-components/BaseController';\r\n\r\n/* == INTERFACES ============================================================ */\r\ninterface Configuration {\r\n\tinstanceFactory: (id: string) => BaseController | null;\r\n\tonInstanceActivated: (step: Step) => void;\r\n}\r\n\r\nexport interface Step {\r\n\tid: string;\r\n\tinstance?: BaseController;\r\n}\r\n\r\n/* == CLASS ================================================================= */\r\nexport class NavigationManager {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(private steps: Step[], private config: Configuration) {\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate activeStepId: string;\r\n\r\n\t/* -- INSTANCE PROPERTIES ----------------------------------------------- */\r\n\tprivate get activeIndex(): number | undefined {\r\n\t\treturn this.steps?.findIndex(step => step.id === this.activeStepId);\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate activateStep(step: Step): void {\r\n\t\tthis.setVisibility(step, true);\r\n\t\tthis.activeStepId = step.id;\r\n\t\tthis.config.onInstanceActivated?.call(this, step);\r\n\t}\r\n\r\n\tprivate deactivateStep(step: Step): void {\r\n\t\tthis.setVisibility(step, false);\r\n\t}\r\n\r\n\tprivate getInstance(step: Step): BaseController {\r\n\t\tif (!step.instance) {\r\n\t\t\tstep.instance = this.config.instanceFactory(step.id);\r\n\t\t}\r\n\r\n\t\treturn step.instance;\r\n\t}\r\n\r\n\tprivate setup() {\r\n\t\tconst [firstStep] = this.steps;\r\n\t\tthis.activateStep(firstStep);\r\n\t}\r\n\r\n\tprivate setVisibility(step: Step, isVisible: boolean): boolean {\r\n\t\tconst instance = this.getInstance(step);\r\n\t\tif (!instance) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tinstance.isVisible = isVisible;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\tgoBack(): void {\r\n\t\tconst activeIndex = this.activeIndex;\r\n\t\tif (activeIndex === undefined || activeIndex === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.deactivateStep(this.steps[activeIndex]);\r\n\t\tthis.activateStep(this.steps[activeIndex - 1]);\r\n\t}\r\n\r\n\tgoForward(): void {\r\n\t\tconst activeIndex = this.activeIndex;\r\n\t\tif (activeIndex === undefined || activeIndex === this.steps.length - 11) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.deactivateStep(this.steps[activeIndex]);\r\n\t\tthis.activateStep(this.steps[activeIndex + 1]);\r\n\t}\r\n\r\n\tgoTo(id: string): void {\r\n\t\tconst step = this.steps.find(step => step.id === id);\r\n\t\tif (step === undefined) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.deactivateStep(this.steps[this.activeIndex]);\r\n\t\tthis.activateStep(step);\r\n\t}\r\n}\r\n","/* eslint-disable @typescript-eslint/ban-types */\r\n\r\n/*\r\n |------------------------------------------------------------------------------\r\n | Bind context decorator\r\n |------------------------------------------------------------------------------\r\n |\r\n | Can be used to bind the this value of a property or method to the class\r\n | in which it is defined.\r\n |\r\n | Source: https://www.npmjs.com/package/bind-decorator\r\n |\r\n */\r\n\r\nexport function bind<T extends Function>(\r\n\ttarget: object,\r\n\tpropertyKey: string,\r\n\tdescriptor: TypedPropertyDescriptor<T>\r\n): TypedPropertyDescriptor<T> | void {\r\n\tif (!descriptor || typeof descriptor.value !== 'function') {\r\n\t\tthrow new TypeError(\r\n\t\t\t`Only methods can be decorated with @bind. <${propertyKey}> is not a method!`\r\n\t\t);\r\n\t}\r\n\r\n\treturn {\r\n\t\tconfigurable: true,\r\n\t\tget(this: T): T {\r\n\t\t\tconst bound: T = descriptor.value?.bind(this);\r\n\t\t\t// Credits to https://github.com/andreypopp/autobind-decorator for\r\n\t\t\t// memoizing the result of bind against a symbol on the instance.\r\n\t\t\tObject.defineProperty(this, propertyKey, {\r\n\t\t\t\tvalue: bound,\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\twritable: true\r\n\t\t\t});\r\n\r\n\t\t\treturn bound;\r\n\t\t}\r\n\t};\r\n}\r\n","/* == PRIVATE FIELDS ======================================================== */\r\nlet id = 0;\r\n\r\n/* == CLASS ================================================================= */\r\nexport class Player {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(public name: string, tileCount: number) {\r\n\t\tthis._id = Symbol(`player__${id++}`);\r\n\t\tthis._tiles = tileCount;\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate _id: symbol;\r\n\tprivate _score = 0;\r\n\tprivate _tiles: number;\r\n\r\n\t/* -- INSTANCE PROPERTIES ----------------------------------------------- */\r\n\tget hasEmptyHand(): boolean {\r\n\t\treturn this._tiles === 0;\r\n\t}\r\n\r\n\tget id(): symbol {\r\n\t\treturn this._id;\r\n\t}\r\n\r\n\tget score(): number {\r\n\t\treturn this._score;\r\n\t}\r\n\r\n\tget tileCount(): number {\r\n\t\treturn this._tiles;\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\tupdateScore(delta: number): number {\r\n\t\tthis._score += delta;\r\n\r\n\t\treturn this._score;\r\n\t}\r\n\r\n\tupdateTileCount(delta: number): number {\r\n\t\tthis._tiles += delta;\r\n\r\n\t\treturn this._tiles;\r\n\t}\r\n}\r\n","import { PlayerSummary } from '01-global/interfaces/PlayerSummary';\r\nimport { bind } from '02-utilities/decorators/bind';\r\nimport { Player } from './Player';\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst singletonEnforcer = Symbol('singleton');\r\n\r\n/* == CLASS ================================================================= */\r\nexport class PlayerManager {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(enforcer: symbol) {\r\n\t\tif (enforcer !== singletonEnforcer) {\r\n\t\t\tthrow 'Use the static property instance to get the PlayerManager';\r\n\t\t}\r\n\t}\r\n\r\n\t/* -- SINGLETON --------------------------------------------------------- */\r\n\tprivate static _instance: PlayerManager = null;\r\n\tstatic get instance(): PlayerManager {\r\n\t\tif (PlayerManager._instance === null) {\r\n\t\t\tPlayerManager._instance = new PlayerManager(singletonEnforcer);\r\n\t\t}\r\n\r\n\t\treturn PlayerManager._instance;\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate activeIndex: number = null;\r\n\tprivate _activePlayer: Player = null;\r\n\tprivate _players: Player[] = [];\r\n\r\n\tget activePlayer(): PlayerSummary {\r\n\t\treturn this.createPlayerSummary(this._activePlayer);\r\n\t}\r\n\r\n\tget firstRankedPlayer(): PlayerSummary {\r\n\t\tconst player = this._players.reduce(\r\n\t\t\t(result, player) => {\r\n\t\t\t\treturn player.score > result.score ? player : result;\r\n\t\t\t},\r\n\t\t\t{ score: -Infinity } as Player\r\n\t\t);\r\n\r\n\t\treturn this.createPlayerSummary(player);\r\n\t}\r\n\r\n\tget players(): PlayerSummary[] {\r\n\t\treturn this._players.map(this.createPlayerSummary);\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\t@bind\r\n\tprivate createPlayerSummary(player: Player): PlayerSummary {\r\n\t\treturn {\r\n\t\t\thasEmptyHand: player.hasEmptyHand,\r\n\t\t\tid: player.id,\r\n\t\t\tisActive: this._activePlayer?.id === player.id,\r\n\t\t\tname: player.name,\r\n\t\t\tscore: player.score,\r\n\t\t\ttileCount: player.tileCount\r\n\t\t};\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\tactivateNextPlayer(): PlayerSummary {\r\n\t\tthis.activeIndex = (this.activeIndex + 1) % this._players.length;\r\n\t\tthis._activePlayer = this._players[this.activeIndex];\r\n\r\n\t\treturn this.players[this.activeIndex];\r\n\t}\r\n\r\n\tcreatePlayers(names: Player['name'][], initialTileCount: number): void {\r\n\t\tthis.activeIndex = null;\r\n\t\tthis._activePlayer = null;\r\n\r\n\t\tthis._players = names.map(name => new Player(name, initialTileCount));\r\n\t}\r\n\r\n\tsetActivePlayer(id: Player['id']): PlayerSummary {\r\n\t\tthis.activeIndex = this._players.findIndex(player => player.id === id);\r\n\t\tthis._activePlayer = this._players[this.activeIndex];\r\n\r\n\t\treturn this.players[this.activeIndex];\r\n\t}\r\n\r\n\tupdateActivePlayerScore(delta: number): number {\r\n\t\treturn this._activePlayer.updateScore(delta);\r\n\t}\r\n\tupdateActivePlayerTileCount(delta: number): number {\r\n\t\treturn this._activePlayer.updateTileCount(delta);\r\n\t}\r\n\r\n\tupdatePlayerScore(id: Player['id'], delta: number): number {\r\n\t\tconst player = this._players.find(player => player.id === id);\r\n\r\n\t\treturn player?.updateScore(delta);\r\n\t}\r\n}\r\n","export enum TurnType {\r\n\t/**\r\n\t * The default state is for a regular turn. It allows the user to specify\r\n\t * the number of points played as well as how many tiles were drawn and if\r\n\t * a special shape has been completed in the turn.\r\n\t */\r\n\tDefault = 'default',\r\n\r\n\t/**\r\n\t * In the collection state all controls except the number pad will be\r\n\t * hidden. It is meant to collect the points each player has left at the\r\n\t * end of a round so the points can be added to the score of the winner.\r\n\t */\r\n\tCollection = 'collection',\r\n\r\n\t/**\r\n\t * In the round start only the number pad and the control to indicate a trio\r\n\t * has been played will be displayed.\r\n\t */\r\n\tRoundStart = 'round-start'\r\n}\r\n\r\nexport enum Shape {\r\n\tBridge = 'bridge',\r\n\tDoubleSided = 'double-sided',\r\n\tHexagon = 'hexagon'\r\n}\r\n","import { Shape } from '01-global/enum';\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst tileDrawPenalty = -5;\r\nconst initialTiles = [\r\n\t9, // 2\r\n\t7, // 3\r\n\t7, // 4\r\n\t6, // 5\r\n\t6 // 6\r\n];\r\nconst roundBonus = 25;\r\nconst shapeBonus = {\r\n\t[Shape.Bridge]: 40,\r\n\t[Shape.DoubleSided]: 40,\r\n\t[Shape.Hexagon]: 50\r\n};\r\nconst passPenalty = -10;\r\n\r\n/* == PUBLIC METHODS ======================================================== */\r\nexport function getDrawnTilesPenalty(tilesDrawn?: number): number {\r\n\treturn (tilesDrawn ?? 0) * tileDrawPenalty;\r\n}\r\n\r\nexport function getInitialTileCount(playerCount: number): number {\r\n\tconst correctedIndex = Math.min(Math.max(0, playerCount - 2), 4);\r\n\r\n\treturn initialTiles[correctedIndex];\r\n}\r\n\r\nexport function getOpeningBonus(playedPoints: number): number {\r\n\treturn playedPoints === 0 ? 40 : 10;\r\n}\r\n\r\nexport function getRoundBonus(): number {\r\n\treturn roundBonus;\r\n}\r\n\r\nexport function getPassPenalty(): number {\r\n\treturn passPenalty;\r\n}\r\n\r\nexport function getShapeBonus(shape?: Shape): number {\r\n\treturn shapeBonus[shape] ?? 0;\r\n}\r\n","import { Turn } from '01-global/interfaces/Turn';\r\nimport { TurnType } from '01-global/enum';\r\nimport {\r\n\tgetDrawnTilesPenalty,\r\n\tgetOpeningBonus,\r\n\tgetPassPenalty,\r\n\tgetRoundBonus,\r\n\tgetShapeBonus\r\n} from './rules';\r\nimport { PlayerPoints } from '01-global/interfaces/PlayerPoints';\r\nimport { TurnSummary } from '01-global/interfaces/TurnSummary';\r\nimport { RemainingPoints } from '01-global/interfaces/RemainingPoints';\r\nimport { PlayerSummary } from '01-global/interfaces/PlayerSummary';\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst dummyWinner: RemainingPoints = {\r\n\tid: Symbol('dummy'),\r\n\tpoints: Infinity\r\n};\r\n\r\n/* == PRIVATE METHODS ======================================================= */\r\nfunction calculateScore(turn: Turn): number {\r\n\tswitch (turn.turnType) {\r\n\t\tcase TurnType.Default:\r\n\t\t\treturn scoreDefaultTurn(turn);\r\n\r\n\t\tcase TurnType.RoundStart:\r\n\t\t\treturn scoreRoundStart(turn);\r\n\r\n\t\tdefault:\r\n\t\t\treturn 0;\r\n\t}\r\n}\r\n\r\nfunction calculateTileDelta(turn: Turn): number {\r\n\tconst points = turn.points ?? 0;\r\n\tconst tilePlayed = points === 0 ? 0 : -1;\r\n\r\n\treturn tilePlayed + (turn.tilesDrawn ?? 0);\r\n}\r\n\r\nfunction scoreDefaultTurn(turn: Turn): number {\r\n\treturn turn.points === undefined\r\n\t\t? getDrawnTilesPenalty(turn.tilesDrawn) + getPassPenalty()\r\n\t\t: turn.points +\r\n\t\t\t\tgetShapeBonus(turn.completedShape) +\r\n\t\t\t\tgetDrawnTilesPenalty(turn.tilesDrawn);\r\n}\r\n\r\nfunction scoreRoundStart(turn: Turn): number {\r\n\tconst points = turn.points ?? 0;\r\n\tconst bonusPoints = turn.isTriple ? getOpeningBonus(points) : 0;\r\n\r\n\treturn points + bonusPoints;\r\n}\r\n\r\n/* == PUBLIC METHODS ======================================================== */\r\nexport function awardRemainingPoints(\r\n\tremainingPoints: RemainingPoints[]\r\n): RemainingPoints {\r\n\t// The winner is the player with the least remaining points.\r\n\tconst winner = remainingPoints.reduce((winner, entry) => {\r\n\t\treturn entry.points < winner.points ? entry : winner;\r\n\t}, dummyWinner);\r\n\r\n\tconst remainingPlayers = remainingPoints.filter(\r\n\t\tentry => entry.id !== winner.id\r\n\t);\r\n\tconst points = remainingPlayers.reduce(\r\n\t\t(total, entry) => total + entry.points,\r\n\t\t0\r\n\t);\r\n\r\n\treturn {\r\n\t\tid: winner.id,\r\n\t\tpoints: points - winner.points\r\n\t};\r\n}\r\n\r\nexport function rankPlayers(players: PlayerSummary[]): PlayerSummary['id'][] {\r\n\tconst temp = [...players];\r\n\ttemp.sort((a, b) => b.score - a.score);\r\n\r\n\treturn temp.map(player => player.id);\r\n}\r\n\r\nexport function scoreLockedRound(\r\n\tpointsPerPlayer: PlayerPoints[]\r\n): PlayerPoints {\r\n\tconst winner = pointsPerPlayer.reduce((winner, player) => {\r\n\t\treturn player.points < winner.points ? player : winner;\r\n\t}, dummyWinner);\r\n\tconst points = pointsPerPlayer\r\n\t\t.filter(player => player.id !== winner.id)\r\n\t\t.reduce((total, player) => total + player.points, 0);\r\n\r\n\treturn {\r\n\t\tid: winner.id,\r\n\t\tpoints: points - winner.points\r\n\t};\r\n}\r\n\r\nexport function scoreTurn(turn: Turn): TurnSummary {\r\n\treturn {\r\n\t\tscoreDelta: calculateScore(turn),\r\n\t\ttileDelta: calculateTileDelta(turn)\r\n\t};\r\n}\r\n\r\nexport function scoreWonRound(pointsPerPlayer: PlayerPoints[]): number {\r\n\treturn (\r\n\t\tpointsPerPlayer.reduce((total, player) => total + player.points, 0) +\r\n\t\tgetRoundBonus()\r\n\t);\r\n}\r\n","import { bind } from '02-utilities/decorators/bind';\r\n\r\n/* == INTERFACES ============================================================ */\r\ntype BeforeShow = (content: HTMLElement) => void;\r\n\r\ninterface Placeholder {\r\n\t[name: string]: string;\r\n}\r\n\r\ninterface ShowOptions {\r\n\tonBeforeShow?: BeforeShow;\r\n\tonClose?: () => void;\r\n\tplaceholders?: Placeholder;\r\n}\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst moduleName = 'dialog';\r\nconst baseSelector = `.js-${moduleName}`;\r\n\r\nconst cssClass = {\r\n\tisVisible: 'is-visible'\r\n};\r\n\r\nconst selector = {\r\n\tcloseTrigger: `${baseSelector}__close`,\r\n\tcontainer: `${baseSelector}__container`,\r\n\tportal: '#dialog-portal'\r\n};\r\n\r\n/* == CLASS ================================================================= */\r\nexport class Dialog {\r\n\tconstructor() {\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate container: HTMLElement;\r\n\tprivate closeCallback: () => void;\r\n\tprivate portal: HTMLElement;\r\n\r\n\t/* -- INSTANCE PROPERTIES ----------------------------------------------- */\r\n\tget dialogContent(): HTMLElement {\r\n\t\treturn this.container;\r\n\t}\r\n\r\n\t/* -- EVENT HANDLING ---------------------------------------------------- */\r\n\t@bind\r\n\tprivate onClose(): void {\r\n\t\tthis.hideDialog();\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate bindCloseEvent(): void {\r\n\t\tconst closeTrigger = this.container?.querySelector(selector.closeTrigger);\r\n\t\tcloseTrigger?.addEventListener('click', this.onClose);\r\n\t}\r\n\r\n\tprivate fillPlaceholders(\r\n\t\tcontent: HTMLElement,\r\n\t\tplaceholders: Placeholder\r\n\t): void {\r\n\t\tObject.keys(placeholders).forEach(id => {\r\n\t\t\tconst element = content.querySelector(`[data-placeholder=\"${id}\"]`);\r\n\t\t\tif (element !== null) {\r\n\t\t\t\telement.textContent = placeholders[id];\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprivate getDialogContent(id: string): HTMLElement | null {\r\n\t\tconst template = document.getElementById(\r\n\t\t\t`dialog-${id}`\r\n\t\t) as HTMLTemplateElement;\r\n\r\n\t\treturn (\r\n\t\t\t(template?.content.firstElementChild.cloneNode(true) as HTMLElement) ?? null\r\n\t\t);\r\n\t}\r\n\r\n\tprivate setup() {\r\n\t\tthis.portal = document.querySelector(selector.portal);\r\n\t\tthis.container = this.portal?.querySelector(selector.container);\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\thideDialog(): void {\r\n\t\tthis.portal.classList.remove(cssClass.isVisible);\r\n\t\tthis.container.removeChild(this.container.firstElementChild);\r\n\t\tthis.closeCallback?.();\r\n\t\tthis.closeCallback = null;\r\n\t}\r\n\r\n\tshowDialog(id: string, options: ShowOptions): void {\r\n\t\tthis.closeCallback = options.onClose;\r\n\r\n\t\tconst content = this.getDialogContent(id);\r\n\t\tif (options.placeholders) {\r\n\t\t\tthis.fillPlaceholders(content, options.placeholders);\r\n\t\t}\r\n\r\n\t\tthis.container.appendChild(content);\r\n\t\tthis.bindCloseEvent();\r\n\t\toptions.onBeforeShow?.(this.container);\r\n\r\n\t\tthis.portal.classList.add(cssClass.isVisible);\r\n\t}\r\n}\r\n","/* == PUBLIC METHODS ======================================================== */\r\nexport function classByPredicate(\r\n\ttarget: HTMLElement,\r\n\tcssClass: string,\r\n\tpredicate: boolean\r\n): void {\r\n\tconst manipulation = predicate ? 'add' : 'remove';\r\n\ttarget.classList[manipulation](cssClass);\r\n}\r\n","import { classByPredicate } from '02-utilities/dom';\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst moduleName = 'header';\r\nconst baseSelector = `.js-${moduleName}`;\r\nconst cssClass = {\r\n\thasSubtitle: 'c-header--has-subtitle'\r\n};\r\nconst selector = {\r\n\tsubtitle: `${baseSelector}__subtitle`,\r\n\ttitle: `${baseSelector}__title`\r\n};\r\n\r\n/* == CLASS ================================================================= */\r\nexport class Header {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(readonly base: HTMLElement) {\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate _subtitle: HTMLElement;\r\n\tprivate _title: HTMLElement;\r\n\r\n\t/* -- INSTANCE PROPERTIES ----------------------------------------------- */\r\n\t/* --[ HAS-SUBTITLE ]-- */\r\n\tget hasSubtitle(): boolean {\r\n\t\treturn this.subtitle !== undefined;\r\n\t}\r\n\r\n\t/* --[ SUBTITLE ]-- */\r\n\tget subtitle(): string | undefined {\r\n\t\tconst subtitle = this._subtitle?.textContent;\r\n\r\n\t\treturn subtitle === '' ? undefined : subtitle;\r\n\t}\r\n\tset subtitle(value: string | undefined) {\r\n\t\tthis.updateSubtitle(value);\r\n\t}\r\n\r\n\t/* --[ TITLE ]-- */\r\n\tget title(): string {\r\n\t\treturn this._title?.textContent;\r\n\t}\r\n\tset title(value: string) {\r\n\t\tif (this._title !== null) {\r\n\t\t\tthis._title.textContent = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate setup(): void {\r\n\t\tthis._subtitle = this.base.querySelector(selector.subtitle);\r\n\t\tthis._title = this.base.querySelector(selector.title);\r\n\r\n\t\tclassByPredicate(this.base, cssClass.hasSubtitle, this.hasSubtitle);\r\n\t}\r\n\r\n\tprivate updateSubtitle(subtitle: string | undefined): void {\r\n\t\tif (this._subtitle === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._subtitle.textContent = subtitle ?? '';\r\n\t\tclassByPredicate(this.base, cssClass.hasSubtitle, this.hasSubtitle);\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\tclearSubtitle(): void {\r\n\t\tthis.subtitle = undefined;\r\n\t}\r\n}\r\n\r\n/* == EXPORTS =============================================================== */\r\nexport { baseSelector };\r\n","import { bind } from '02-utilities/decorators/bind';\r\n\r\n/* == INTERFACES ============================================================ */\r\ninterface Configuration {\r\n\tonPerformPrimaryAction?: () => void;\r\n\tonPerformSecondaryAction?: () => void;\r\n}\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst moduleName = 'footer';\r\nconst baseSelector = `.js-${moduleName}`;\r\nconst selector = {\r\n\tbuttonPrimary: `${baseSelector}__primary`,\r\n\tbuttonSecondary: `${baseSelector}__secondary`\r\n};\r\n\r\n/* == CLASS ================================================================= */\r\nexport class Footer {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(readonly base: HTMLElement, private config: Configuration) {\r\n\t\tthis.setup();\r\n\t\tthis.bindEvents();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate primaryButton: HTMLButtonElement;\r\n\tprivate secondaryButton: HTMLButtonElement;\r\n\r\n\t/* -- EVENT HANDLING ---------------------------------------------------- */\r\n\tprivate bindEvents(): void {\r\n\t\tthis.primaryButton?.addEventListener('click', this.onPrimaryButtonClicked);\r\n\t\tthis.secondaryButton?.addEventListener(\r\n\t\t\t'click',\r\n\t\t\tthis.onSecondaryButtonClicked\r\n\t\t);\r\n\t}\r\n\r\n\t@bind\r\n\tprivate onPrimaryButtonClicked(event: Event): void {\r\n\t\tthis.config.onPerformPrimaryAction?.call(this);\r\n\t}\r\n\r\n\t@bind\r\n\tprivate onSecondaryButtonClicked(event: Event): void {\r\n\t\tthis.config.onPerformSecondaryAction?.call(this);\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate setup(): void {\r\n\t\tthis.primaryButton = this.base.querySelector(\r\n\t\t\tselector.buttonPrimary\r\n\t\t) as HTMLButtonElement;\r\n\t\tthis.secondaryButton = this.base.querySelector(\r\n\t\t\tselector.buttonSecondary\r\n\t\t) as HTMLButtonElement;\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\tget primaryEnabled(): boolean {\r\n\t\treturn this.primaryButton?.disabled ?? false;\r\n\t}\r\n\tset primaryEnabled(value: boolean) {\r\n\t\tif (this.primaryButton === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.primaryButton.disabled = !value;\r\n\t}\r\n\r\n\tget secondaryEnabled(): boolean {\r\n\t\treturn this.secondaryButton?.disabled ?? false;\r\n\t}\r\n\tset secondaryEnabled(value: boolean) {\r\n\t\tif (this.secondaryButton === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.secondaryButton.disabled = !value;\r\n\t}\r\n}\r\n\r\n/* == EXPORTS =============================================================== */\r\nexport { baseSelector };\r\n","import {\r\n\tHeader,\r\n\tbaseSelector as headerBaseSelector\r\n} from '04-components/Header';\r\nimport {\r\n\tFooter,\r\n\tbaseSelector as footerBaseSelector\r\n} from '04-components/Footer';\r\n\r\n/* == CLASS ================================================================= */\r\nexport class BaseController {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(readonly base: HTMLElement) {\r\n\t\tthis.setupBase();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprotected header: Header;\r\n\tprotected footer: Footer;\r\n\r\n\t/* -- INSTANCE PROPERTIES ----------------------------------------------- */\r\n\tget isVisible(): boolean {\r\n\t\treturn !this.base.hidden;\r\n\t}\r\n\tset isVisible(value: boolean) {\r\n\t\tthis.base.hidden = !value;\r\n\t}\r\n\r\n\t/* -- PROTECTED METHODS ------------------------------------------------- */\r\n\tprotected onSecondaryAction(): void {\r\n\t\t// noop'\r\n\t}\r\n\r\n\tprotected onPrimaryAction(): void {\r\n\t\t// noop'\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate setupBase() {\r\n\t\tconst headerBase = this.base.querySelector(headerBaseSelector) as HTMLElement;\r\n\t\tconst footerBase = this.base.querySelector(footerBaseSelector) as HTMLElement;\r\n\r\n\t\tif (headerBase !== null) {\r\n\t\t\tthis.header = new Header(headerBase);\r\n\t\t}\r\n\r\n\t\tif (footerBase !== null) {\r\n\t\t\tthis.footer = new Footer(footerBase, {\r\n\t\t\t\tonPerformPrimaryAction: () => this.onPrimaryAction(),\r\n\t\t\t\tonPerformSecondaryAction: () => this.onSecondaryAction()\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n","/* == CONSTANTS ============================================================= */\r\nconst moduleName = 'player-input';\r\nconst baseSelector = `.js-${moduleName}`;\r\nconst selector = {\r\n\tform: `${baseSelector}__form`,\r\n\tinput: 'input'\r\n};\r\n\r\n/* == CLASS ================================================================= */\r\nexport class PlayerInput {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(readonly base: HTMLElement) {\r\n\t\t//\r\n\t}\r\n\r\n\t/* -- INSTANCE PROPERTIES ----------------------------------------------- */\r\n\tget playerNames(): string[] {\r\n\t\treturn this.getPlayerNames();\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate getPlayerNames(): string[] {\r\n\t\tconst inputs = this.base.querySelectorAll(selector.input);\r\n\r\n\t\treturn (Array.from(inputs) as HTMLInputElement[])\r\n\t\t\t.map((input: HTMLInputElement) => input.value.trim())\r\n\t\t\t.filter(name => name !== '');\r\n\t}\r\n}\r\n\r\n/* == EXPORTS =============================================================== */\r\nexport { baseSelector };\r\n","/* == INTERFACES ============================================================ */\r\ninterface Configuration {\r\n\tmessageSelector?: string;\r\n\tscrollToVisible?: boolean;\r\n}\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst defaultConfig: Configuration = {\r\n\tmessageSelector: '.js-message',\r\n\tscrollToVisible: true\r\n};\r\n\r\n/* == PUBLIC METHODS ======================================================== */\r\nexport function updateMessageVisibility(\r\n\tscope: HTMLElement,\r\n\tvisibleIds: string[],\r\n\tconfig?: Configuration\r\n): void {\r\n\tconst configuration = {\r\n\t\t...defaultConfig,\r\n\t\t...config\r\n\t};\r\n\tconst messages: HTMLElement[] = Array.from(\r\n\t\tscope.querySelectorAll(configuration.messageSelector)\r\n\t);\r\n\r\n\tmessages.forEach(message => {\r\n\t\tmessage.hidden = !visibleIds.includes(message.id);\r\n\t});\r\n\r\n\tif (!configuration.scrollToVisible) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst firstMessage = messages.find(message => !message.hidden);\r\n\tfirstMessage?.scrollIntoView({\r\n\t\tbehavior: 'smooth'\r\n\t});\r\n}\r\n","import { BaseController } from '04-components/BaseController';\r\nimport {\r\n\tPlayerInput,\r\n\tbaseSelector as playerInputSelector\r\n} from '04-components/PlayerInput/PlayerInput';\r\nimport { updateMessageVisibility } from '03-modules/error-message';\r\n\r\n/* == INTERFACES ============================================================ */\r\ninterface Selectors {\r\n\tform: string;\r\n}\r\n\r\ninterface Configuration {\r\n\tonPlayersSelected: (names: string[]) => void;\r\n\tselectors: Selectors;\r\n\twarningId: string;\r\n}\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst minimumRequiredPlayers = 2;\r\n\r\n/* == CLASS ================================================================= */\r\nexport class GameStartController extends BaseController {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(readonly base: HTMLElement, readonly config?: Configuration) {\r\n\t\tsuper(base);\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate playerInput: PlayerInput;\r\n\r\n\t/* -- PROTECTED METHODS ------------------------------------------------- */\r\n\tprotected onPrimaryAction(): void {\r\n\t\tconst playerNames = this.playerInput?.playerNames ?? [];\r\n\t\tconst isValid = playerNames.length >= minimumRequiredPlayers;\r\n\r\n\t\tthis.updateWarningVisibility(isValid);\r\n\r\n\t\tif (isValid) {\r\n\t\t\tthis.config.onPlayersSelected?.call(this, playerNames);\r\n\t\t}\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate setup(): void {\r\n\t\tconst playerInputBase = this.base.querySelector(\r\n\t\t\tplayerInputSelector\r\n\t\t) as HTMLElement;\r\n\t\tif (playerInputBase) {\r\n\t\t\tthis.playerInput = new PlayerInput(playerInputBase);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate updateWarningVisibility(hide: boolean): void {\r\n\t\tconst visibleIds = hide ? [] : [this.config.warningId];\r\n\r\n\t\tupdateMessageVisibility(this.base, visibleIds);\r\n\t}\r\n}\r\n","import { PlayerSummary } from '01-global/interfaces/PlayerSummary';\r\nimport { updateMessageVisibility } from '03-modules/error-message';\r\nimport { BaseController } from '04-components/BaseController';\r\n\r\n/* == INTERFACES ============================================================ */\r\ninterface Configuration {\r\n\tisVisible: boolean;\r\n\tonCancel: () => void;\r\n\tonPlayerSelected: (player: PlayerSummary) => void;\r\n\tselectors: Selectors;\r\n\twarningId: string;\r\n}\r\n\r\ninterface Player {\r\n\tid: string;\r\n\tsummary: PlayerSummary;\r\n}\r\n\r\ninterface Selectors {\r\n\tnameList: string;\r\n}\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst selector = {\r\n\tselectedPlayer: 'input[type=\"radio\"]:checked'\r\n};\r\n\r\n/* == CLASS ================================================================= */\r\nexport class PlayerSelectController extends BaseController {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(readonly base: HTMLElement, private config: Configuration) {\r\n\t\tsuper(base);\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate players: Player[];\r\n\tprivate _round: number;\r\n\r\n\t/* -- INSTANCE PROPERTIES ----------------------------------------------- */\r\n\tget round(): number {\r\n\t\treturn this._round;\r\n\t}\r\n\tset round(value: number) {\r\n\t\tif (value === this._round || !Number.isFinite(value)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._round = value;\r\n\t\tthis.updateHeader();\r\n\t}\r\n\r\n\t/* -- EVENT HANDLING ---------------------------------------------------- */\r\n\tprotected onSecondaryAction(): void {\r\n\t\tthis.config.onCancel?.call(this);\r\n\t}\r\n\r\n\tprotected onPrimaryAction(): void {\r\n\t\tconst selectedPlayer = this.getSelectedPlayer();\r\n\t\tconst isValid = selectedPlayer !== null;\r\n\r\n\t\tthis.updateWarningVisibility(isValid);\r\n\r\n\t\tif (isValid) {\r\n\t\t\tthis.config.onPlayerSelected?.call(this, selectedPlayer);\r\n\t\t}\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate getSelectedPlayer(): PlayerSummary | null {\r\n\t\tconst selectedInput = this.base.querySelector(selector.selectedPlayer);\r\n\r\n\t\treturn selectedInput === null\r\n\t\t\t? null\r\n\t\t\t: this.players.find(player => player.id === selectedInput.id).summary;\r\n\t}\r\n\r\n\tprivate renderPlayer(player: Player): string {\r\n\t\treturn `<li class=\"c-radio-button\">\r\n\t\t\t<input class=\"c-radio-button__input\" type=\"radio\" name=\"player-select\" id=\"${player.id}\">\r\n\t\t\t<label for=\"${player.id}\" class=\"c-radio-button__button\">\r\n\t\t\t\t${player.summary.name}\r\n\t\t\t</label>\r\n\t\t</li>`;\r\n\t}\r\n\r\n\tprivate renderPlayersList(): void {\r\n\t\tconst listElement = this.base.querySelector(this.config.selectors.nameList);\r\n\t\tif (listElement === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlistElement.innerHTML = this.players\r\n\t\t\t.map(player => this.renderPlayer(player))\r\n\t\t\t.join('');\r\n\t}\r\n\r\n\tprivate setup(): void {\r\n\t\tthis.isVisible = this.config.isVisible;\r\n\t}\r\n\r\n\tprivate updateHeader(): void {\r\n\t\tthis.header.title = `Start Round ${this.round}`.trim();\r\n\t}\r\n\r\n\tprivate updateWarningVisibility(hide: boolean): void {\r\n\t\tconst visibleIds = hide ? [] : [this.config.warningId];\r\n\r\n\t\tupdateMessageVisibility(this.base, visibleIds);\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\tsetPlayers(players: PlayerSummary[]): void {\r\n\t\tthis.players = players.map((player, index) => ({\r\n\t\t\tid: `player_${index}`,\r\n\t\t\tsummary: player\r\n\t\t}));\r\n\r\n\t\tthis.renderPlayersList();\r\n\t}\r\n}\r\n","/* == CONSTANTS ============================================================= */\r\nconst cssClass = {\r\n\tisVisible: 'is-visible'\r\n};\r\n\r\n/* == CLASS ================================================================= */\r\nexport class FlyOut {\r\n\tconstructor(readonly base: HTMLElement) {\r\n\t\t//\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\thide(): void {\r\n\t\tthis.base.classList.remove(cssClass.isVisible);\r\n\t}\r\n\r\n\tshow(): void {\r\n\t\tthis.base.classList.add(cssClass.isVisible);\r\n\t}\r\n}\r\n","import { bind } from '02-utilities/decorators/bind';\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst moduleName = 'number-pad';\r\nconst baseSelector = `.js-${moduleName}`;\r\nconst defaultValue = '';\r\n\r\nconst action = {\r\n\tbackspace: 'backspace',\r\n\tclear: 'clear'\r\n};\r\n\r\nconst attributeName = {\r\n\taction: 'data-action',\r\n\tvalue: 'data-value'\r\n};\r\n\r\nconst selector = {\r\n\tbutton: `[${attributeName.action}], [${attributeName.value}]`\r\n};\r\n\r\n/* == CLASS ================================================================= */\r\nexport class NumberPad {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(\r\n\t\treadonly base: HTMLElement,\r\n\t\tprivate callback?: (value: number | undefined) => void\r\n\t) {\r\n\t\tthis.bindEvents();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate _value: string = defaultValue;\r\n\r\n\t/* -- INSTANCE PROPERTIES ----------------------------------------------- */\r\n\tget value(): number | undefined {\r\n\t\treturn this._value === '' ? undefined : parseInt(this._value, 10);\r\n\t}\r\n\tset value(value: number) {\r\n\t\tif (Number.isFinite(value)) {\r\n\t\t\tthis._value = value.toString();\r\n\t\t}\r\n\t}\r\n\r\n\t/* -- EVENT HANDLING ---------------------------------------------------- */\r\n\tprivate bindEvents(): void {\r\n\t\tthis.base.addEventListener('click', this.onClick);\r\n\t}\r\n\r\n\t@bind\r\n\tprivate onClick(event: Event): void {\r\n\t\tconst button = (event.target as HTMLElement).closest(selector.button);\r\n\t\tif (button === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst hasChanged = button.hasAttribute(attributeName.action)\r\n\t\t\t? this.processAction(button.getAttribute(attributeName.action))\r\n\t\t\t: this.processValue(button.getAttribute(attributeName.value));\r\n\r\n\t\tif (hasChanged && this.callback) {\r\n\t\t\tthis.callback(this.value);\r\n\t\t}\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate processAction(selectedAction: string): boolean {\r\n\t\tif (this._value === '') {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tswitch (selectedAction) {\r\n\t\t\tcase action.backspace:\r\n\t\t\t\tthis._value = this._value.slice(0, -1);\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\tcase action.clear:\r\n\t\t\t\tthis.reset();\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate processValue(value: string): boolean {\r\n\t\tthis._value += value;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\treset(): void {\r\n\t\tthis._value = defaultValue;\r\n\t}\r\n}\r\n\r\n/* == EXPORTS =============================================================== */\r\nexport { baseSelector };\r\n","import { bind } from '02-utilities/decorators/bind';\r\nimport { NumberPad } from '04-components/NumberPad';\r\n\r\n/* == INTERFACES ============================================================ */\r\ninterface Configuration {\r\n\tdefaultPoints?: number;\r\n\tonPointsChanged?: (value: number) => void;\r\n\tselectors: Selectors;\r\n}\r\n\r\ninterface Selectors {\r\n\tdisplay: string;\r\n\tnumberPad: string;\r\n}\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst defaultValue = 0;\r\n\r\n/* == CLASS ================================================================= */\r\nexport class NumberEntry {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(readonly base: HTMLElement, private configuration: Configuration) {\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- PRIVATE FIELDS ---------------------------------------------------- */\r\n\tprivate display: HTMLElement;\r\n\tprivate numberPad: NumberPad;\r\n\r\n\t/* -- INSTANCE PROPERTIES ----------------------------------------------- */\r\n\tget value(): number | undefined {\r\n\t\treturn this.numberPad.value;\r\n\t}\r\n\tset value(value: number) {\r\n\t\tthis.numberPad.value = value;\r\n\t\tthis.showPoints(value);\r\n\t}\r\n\r\n\t/* -- EVENT HANDLING ---------------------------------------------------- */\r\n\t@bind\r\n\tprivate onPointsChanged(value: number): void {\r\n\t\tthis.showPoints(value);\r\n\t\tthis.configuration.onPointsChanged?.(value);\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate setup(): void {\r\n\t\tthis.display = this.base.querySelector(this.configuration.selectors.display);\r\n\r\n\t\tconst numberPadBase = this.base.querySelector(\r\n\t\t\tthis.configuration.selectors.numberPad\r\n\t\t) as HTMLElement;\r\n\t\tif (numberPadBase !== null) {\r\n\t\t\tthis.numberPad = new NumberPad(numberPadBase, this.onPointsChanged);\r\n\t\t}\r\n\r\n\t\tif (this.configuration.defaultPoints !== undefined) {\r\n\t\t\tthis.value = this.configuration.defaultPoints;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate showPoints(points: number): void {\r\n\t\tif (!this.display) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.display.textContent = points?.toString() ?? '0';\r\n\t}\r\n\r\n\t/* -- PULBIC METHODS ---------------------------------------------------- */\r\n\treset(): void {\r\n\t\tthis.value = defaultValue;\r\n\t}\r\n}\r\n","/**\r\n * TODO:\r\n * - Restore header title after setting points\r\n * - Use NumberEntry\r\n */\r\n\r\nimport { PlayerSummary } from '01-global/interfaces/PlayerSummary';\r\nimport { RemainingPoints } from '01-global/interfaces/RemainingPoints';\r\nimport { bind } from '02-utilities/decorators/bind';\r\nimport { updateMessageVisibility } from '03-modules/error-message';\r\nimport { FlyOut } from '03-modules/fly-out';\r\nimport { BaseController } from '04-components/BaseController';\r\nimport { NumberEntry } from '04-components/NumberEntry';\r\n\r\n/* == INTERFACES ============================================================ */\r\ninterface Configuration {\r\n\tisVisible: boolean;\r\n\tonPointsCollected: (points: RemainingPoints[]) => void;\r\n\tselectors: Selectors;\r\n\ttranslations: {\r\n\t\theaderPrompt: string;\r\n\t};\r\n\twarningId: string;\r\n}\r\n\r\ninterface Player {\r\n\tid: string;\r\n\tpoints?: number;\r\n\tsummary: PlayerSummary;\r\n}\r\n\r\ninterface Selectors {\r\n\tflyOut: string;\r\n\tnumberEntry: string;\r\n\tplayerList: string;\r\n\tsetPoints: string;\r\n}\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst attribute = {\r\n\tid: 'data-id'\r\n};\r\n\r\n/* == CLASS ================================================================= */\r\nexport class PointCollectionController extends BaseController {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(readonly base: HTMLElement, private config: Configuration) {\r\n\t\tsuper(base);\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate flyIn: FlyOut;\r\n\tprivate numberEntry: NumberEntry;\r\n\tprivate players: Player[];\r\n\tprivate selectedPlayer: Player;\r\n\r\n\t/* -- EVENT HANDLING ---------------------------------------------------- */\r\n\t@bind\r\n\tprivate onClicked(event: MouseEvent): void {\r\n\t\tconst playerId = (event.target as HTMLElement)\r\n\t\t\t.closest(`[${attribute.id}]:not(:disabled)`)\r\n\t\t\t?.getAttribute(attribute.id);\r\n\r\n\t\tif (playerId === undefined) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.selectedPlayer = this.players.find(player => player.id === playerId);\r\n\t\tif (this.selectedPlayer === undefined) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.numberEntry.value = this.selectedPlayer.points ?? 0;\r\n\r\n\t\tthis.header.title = this.selectedPlayer.summary.name;\r\n\t\tthis.footer.primaryEnabled = false;\r\n\t\tthis.flyIn?.show();\r\n\t}\r\n\r\n\t@bind\r\n\tprivate onSetPoints(): void {\r\n\t\tthis.selectedPlayer.points = this.numberEntry.value;\r\n\t\tthis.renderPlayersList();\r\n\t\tthis.flyIn?.hide();\r\n\t\tthis.header.title = this.config.translations.headerPrompt;\r\n\t\tthis.footer.primaryEnabled = true;\r\n\t}\r\n\r\n\tprotected onPrimaryAction(): void {\r\n\t\tconst invalidPlayers = this.getPlayersWithoutPoints();\r\n\t\tconst isValid = invalidPlayers.length === 0;\r\n\r\n\t\tthis.updateWarningVisibility(isValid);\r\n\r\n\t\tif (!isValid) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst result = this.players.map(({ points, summary: { id } }) => ({\r\n\t\t\tid,\r\n\t\t\tpoints\r\n\t\t}));\r\n\t\tthis.config.onPointsCollected?.(result);\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate getPlayersWithoutPoints(): Player[] {\r\n\t\treturn this.players.filter(({ points, summary: { hasEmptyHand } }) => {\r\n\t\t\treturn (points ?? 0) === 0 && !hasEmptyHand;\r\n\t\t});\r\n\t}\r\n\r\n\tprivate renderPlayer(player: Player): string {\r\n\t\tconst {\r\n\t\t\tid,\r\n\t\t\tpoints,\r\n\t\t\tsummary: { hasEmptyHand, name }\r\n\t\t} = player;\r\n\r\n\t\treturn `<li>\r\n\t\t\t<button\r\n\t\t\t\ttype=\"button\"\r\n\t\t\t\tclass=\"o-structure o-structure--vertical-center c-score-button\"\r\n\t\t\t\tdata-id=\"${id}\"\r\n\t\t\t\t${hasEmptyHand ? 'disabled' : ''}\r\n\t\t\t>\r\n\t\t\t\t<p class=\"o-structure o-structure--vertical o-structure--grow\">\r\n\t\t\t\t\t<span class=\"c-score-button__name\">${name}</span>\r\n\t\t\t\t\t${hasEmptyHand ? '<span>Round winner</span>' : ''}\r\n\t\t\t\t\t${points === 0 ? '<span>No points set</span>' : ''}\r\n\t\t\t\t</p>\r\n\t\t\t\t${(points ?? 0) === 0 ? '' : `<p class=\"c-score-button__score\">${points}</p>`}\r\n\t\t\t\t${hasEmptyHand ? '' : '<p class=\"c-score-button__chevron\">❯</p>'}\r\n\t\t\t</button>\r\n\t\t</li>`;\r\n\t}\r\n\r\n\tprivate renderPlayersList(): void {\r\n\t\tconst listElement = this.base.querySelector(this.config.selectors.playerList);\r\n\t\tif (listElement === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlistElement.innerHTML = this.players\r\n\t\t\t.map(player => this.renderPlayer(player))\r\n\t\t\t.join('');\r\n\t}\r\n\r\n\tprivate setup(): void {\r\n\t\tconst flyInBase = this.base.querySelector(\r\n\t\t\tthis.config.selectors.flyOut\r\n\t\t) as HTMLElement;\r\n\t\tif (flyInBase !== null) {\r\n\t\t\tthis.flyIn = new FlyOut(flyInBase);\r\n\t\t}\r\n\r\n\t\tconst numberEntryBase = this.base.querySelector(\r\n\t\t\tthis.config.selectors.numberEntry\r\n\t\t) as HTMLElement;\r\n\t\tif (numberEntryBase !== null) {\r\n\t\t\tthis.numberEntry = new NumberEntry(numberEntryBase, {\r\n\t\t\t\tselectors: {\r\n\t\t\t\t\tdisplay: '.js-number-entry__display',\r\n\t\t\t\t\tnumberPad: '.js-number-entry__number-pad'\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tconst setPointsButton = this.base.querySelector(\r\n\t\t\tthis.config.selectors.setPoints\r\n\t\t);\r\n\t\tif (setPointsButton !== null) {\r\n\t\t\tsetPointsButton.addEventListener('click', this.onSetPoints);\r\n\t\t}\r\n\t\tthis.base.addEventListener('click', this.onClicked);\r\n\t\tthis.isVisible = this.config.isVisible;\r\n\t}\r\n\r\n\tprivate updateWarningVisibility(hide: boolean): void {\r\n\t\tconst visibleIds = hide ? [] : [this.config.warningId];\r\n\r\n\t\tupdateMessageVisibility(this.base, visibleIds);\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\tsetPlayers(players: PlayerSummary[]): void {\r\n\t\tthis.players = players.map((player, index) => ({\r\n\t\t\tid: `player_${index}`,\r\n\t\t\tpoints: player.hasEmptyHand ? 0 : undefined,\r\n\t\t\tsummary: player\r\n\t\t}));\r\n\r\n\t\tthis.renderPlayersList();\r\n\t}\r\n}\r\n","import { updateMessageVisibility } from '03-modules/error-message';\r\nimport { BaseController } from '04-components/BaseController';\r\nimport { NumberEntry } from '04-components/NumberEntry';\r\n\r\n/* == INTERFACES ============================================================ */\r\ninterface Configuration {\r\n\tdefaultPoints: number;\r\n\tisVisible: boolean;\r\n\tonCancel: () => void;\r\n\tonLimitSet: (points: number) => void;\r\n\tpointsValidation: PointsValidation;\r\n\tselectors: Selectors;\r\n}\r\n\r\ninterface PointsValidation {\r\n\tmaximum: number;\r\n\tminimum: number;\r\n\twarningId: string;\r\n}\r\n\r\ninterface Selectors {\r\n\tnumberEntry: string;\r\n}\r\n\r\n/* == CLASS ================================================================= */\r\nexport class PointLimitController extends BaseController {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(readonly base: HTMLElement, private config: Configuration) {\r\n\t\tsuper(base);\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------- */\r\n\tprivate numberEntry: NumberEntry;\r\n\r\n\t/* -- EVENT HANDLING ---------------------------------------------------- */\r\n\tprotected onSecondaryAction(): void {\r\n\t\tthis.config.onCancel?.call(this);\r\n\t}\r\n\r\n\tprotected onPrimaryAction(): void {\r\n\t\tconst { pointsValidation } = this.config;\r\n\t\t// setLimit = this.numberPad.value,\r\n\t\tconst setLimit = this.numberEntry.value;\r\n\t\tconst isValid: boolean =\r\n\t\t\tsetLimit >= pointsValidation.minimum && setLimit <= pointsValidation.maximum;\r\n\r\n\t\tthis.updateWarningVisibility(isValid);\r\n\r\n\t\tif (isValid) {\r\n\t\t\tthis.config.onLimitSet?.call(this, setLimit);\r\n\t\t}\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate setup(): void {\r\n\t\tthis.isVisible = this.config.isVisible;\r\n\r\n\t\tconst numberEntryBase = this.base.querySelector(\r\n\t\t\tthis.config.selectors.numberEntry\r\n\t\t) as HTMLElement;\r\n\t\tif (numberEntryBase !== null) {\r\n\t\t\tthis.numberEntry = new NumberEntry(numberEntryBase, {\r\n\t\t\t\tselectors: {\r\n\t\t\t\t\tdisplay: '.js-number-entry__display',\r\n\t\t\t\t\tnumberPad: '.js-number-entry__number-pad'\r\n\t\t\t\t},\r\n\t\t\t\tdefaultPoints: this.config.defaultPoints\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tprivate updateWarningVisibility(hide: boolean): void {\r\n\t\tconst visibleIds = hide ? [] : [this.config.pointsValidation.warningId];\r\n\r\n\t\tupdateMessageVisibility(this.base, visibleIds);\r\n\t}\r\n}\r\n","import { bind } from '02-utilities/decorators/bind';\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst moduleName = 'checkbox-group';\r\nconst baseSelector = `.js-${moduleName}`;\r\nconst selector = {\r\n\tselectedInput: 'input:checked'\r\n};\r\n\r\n/* == CLASS ================================================================= */\r\nexport class CheckboxGroup {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(\r\n\t\treadonly base: HTMLElement,\r\n\t\tprivate callback?: (value: string | undefined) => void\r\n\t) {\r\n\t\tthis.bindEvents();\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate initialCheckbox: HTMLInputElement;\r\n\tprivate selectedCheckbox: HTMLInputElement;\r\n\r\n\t/* -- INSTANCE PROPERTIES ----------------------------------------------- */\r\n\tget selectedValue(): string | undefined {\r\n\t\treturn this.selectedCheckbox?.value ?? undefined;\r\n\t}\r\n\r\n\t/* -- EVENT HANDLING ---------------------------------------------------- */\r\n\tprivate bindEvents(): void {\r\n\t\tthis.base.addEventListener('change', this.onCheckboxSelected);\r\n\t}\r\n\r\n\t@bind\r\n\tprivate onCheckboxSelected(event: Event): void {\r\n\t\tconst checkbox = event.target as HTMLInputElement;\r\n\r\n\t\tif (checkbox.checked && this.selectedCheckbox) {\r\n\t\t\tthis.selectedCheckbox.checked = false;\r\n\t\t}\r\n\r\n\t\tthis.selectedCheckbox = checkbox.checked ? checkbox : null;\r\n\r\n\t\tif (this.callback) {\r\n\t\t\tthis.callback(this.selectedValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate setup(): void {\r\n\t\tthis.initialCheckbox = this.base.querySelector(selector.selectedInput);\r\n\t\tthis.selectedCheckbox = this.initialCheckbox;\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\treset(): void {\r\n\t\tif (this.selectedCheckbox === this.initialCheckbox) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.selectedCheckbox) {\r\n\t\t\tthis.selectedCheckbox.checked = false;\r\n\t\t}\r\n\r\n\t\tthis.selectedCheckbox = this.initialCheckbox;\r\n\r\n\t\tif (this.selectedCheckbox) {\r\n\t\t\tthis.selectedCheckbox.checked = true;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/* == EXPORTS =============================================================== */\r\nexport { baseSelector };\r\n","import { Shape, TurnType } from '01-global/enum';\r\nimport { Turn } from '01-global/interfaces/Turn';\r\nimport { bind } from '02-utilities/decorators/bind';\r\nimport { CheckboxGroup } from '04-components/CheckboxGroup';\r\nimport { NumberEntry } from '04-components/NumberEntry';\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst moduleName = 'turn-input';\r\nconst baseSelector = `.js-${moduleName}`;\r\nconst selector = {\r\n\tcompletedShape: `${baseSelector}__completed-shape`,\r\n\tform: `${baseSelector}__form`,\r\n\tnumberEntry: `${baseSelector}__number-entry`,\r\n\tplayedTriple: `${baseSelector}__played-triple`,\r\n\tplayedTripleContainer: `${baseSelector}__played-triple-container`,\r\n\ttilesDrawn: `${baseSelector}__drawn-tiles`\r\n};\r\n\r\n/* == CLASS ================================================================= */\r\nexport class TurnInput {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(private base: HTMLElement) {\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate completedShape: CheckboxGroup;\r\n\tprivate numberEntry: NumberEntry;\r\n\tprivate _turnType = TurnType.Default;\r\n\tprivate tilesDrawn: CheckboxGroup;\r\n\r\n\t/* -- INSTANCE PROPERTIES ----------------------------------------------- */\r\n\r\n\t/* --[ HAS-PLAYED-TRIPLE ]-- */\r\n\tprivate get hasPlayedTriple(): boolean {\r\n\t\tconst element = this.base.querySelector(\r\n\t\t\tselector.playedTriple\r\n\t\t) as HTMLInputElement;\r\n\r\n\t\treturn element === null ? false : !element.disabled && element.checked;\r\n\t}\r\n\r\n\t/* --[ TURN ]-- */\r\n\tget turn(): Turn {\r\n\t\treturn this.convertInputToObject();\r\n\t}\r\n\r\n\t/* --[ TURN-TYPE ]-- */\r\n\tget turnType(): TurnType {\r\n\t\treturn this._turnType;\r\n\t}\r\n\tset turnType(newState: TurnType) {\r\n\t\tif (newState === this._turnType) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._turnType = newState;\r\n\t\tthis.updateVisualState();\r\n\t}\r\n\r\n\t/* -- EVENT HANDLING ---------------------------------------------------- */\r\n\t@bind\r\n\tprivate onPointsChanged(value: number): void {\r\n\t\tif (this.turnType !== TurnType.RoundStart) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst element = this.base.querySelector(\r\n\t\t\tselector.playedTriple\r\n\t\t) as HTMLInputElement;\r\n\t\telement.disabled = value % 3 !== 0;\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate convertInputToObject(): Turn {\r\n\t\tconst turn: Turn = {\r\n\t\t\tcompletedShape: this.completedShape.selectedValue as Shape,\r\n\t\t\tturnType: this._turnType\r\n\t\t};\r\n\r\n\t\tif (this.numberEntry.value !== undefined) {\r\n\t\t\tturn.points = this.numberEntry.value;\r\n\t\t}\r\n\r\n\t\tif (this.tilesDrawn.selectedValue) {\r\n\t\t\tturn.tilesDrawn = parseInt(this.tilesDrawn.selectedValue, 10);\r\n\t\t}\r\n\r\n\t\tif (this.hasPlayedTriple) {\r\n\t\t\tturn.isTriple = true;\r\n\t\t}\r\n\r\n\t\treturn turn;\r\n\t}\r\n\r\n\tprivate setup(): void {\r\n\t\tconst completedShape = this.base.querySelector(\r\n\t\t\tselector.completedShape\r\n\t\t) as HTMLElement;\r\n\t\tconst numberEntryBase = this.base.querySelector(\r\n\t\t\tselector.numberEntry\r\n\t\t) as HTMLElement;\r\n\t\tconst tilesDrawn = this.base.querySelector(\r\n\t\t\tselector.tilesDrawn\r\n\t\t) as HTMLElement;\r\n\r\n\t\tif (completedShape !== null) {\r\n\t\t\tthis.completedShape = new CheckboxGroup(completedShape);\r\n\t\t}\r\n\t\tif (numberEntryBase !== null) {\r\n\t\t\tthis.numberEntry = new NumberEntry(numberEntryBase, {\r\n\t\t\t\tonPointsChanged: this.onPointsChanged,\r\n\t\t\t\tselectors: {\r\n\t\t\t\t\tdisplay: '.js-number-entry__display',\r\n\t\t\t\t\tnumberPad: '.js-number-entry__number-pad'\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (tilesDrawn !== null) {\r\n\t\t\tthis.tilesDrawn = new CheckboxGroup(tilesDrawn);\r\n\t\t}\r\n\r\n\t\tthis.updateVisualState();\r\n\t}\r\n\r\n\tprivate updateVisualState(): void {\r\n\t\tif (this.completedShape) {\r\n\t\t\tthis.completedShape.base.hidden = this.turnType !== TurnType.Default;\r\n\t\t}\r\n\t\tif (this.tilesDrawn) {\r\n\t\t\tthis.tilesDrawn.base.hidden = this.turnType !== TurnType.Default;\r\n\t\t}\r\n\r\n\t\tconst playedTripleContainer = this.base.querySelector(\r\n\t\t\tselector.playedTripleContainer\r\n\t\t) as HTMLElement;\r\n\t\tif (playedTripleContainer !== null) {\r\n\t\t\tplayedTripleContainer.hidden = this.turnType !== TurnType.RoundStart;\r\n\t\t}\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\treset(): void {\r\n\t\tconst playedTriple = this.base.querySelector(\r\n\t\t\tselector.playedTriple\r\n\t\t) as HTMLInputElement;\r\n\t\tif (playedTriple) {\r\n\t\t\tplayedTriple.checked = false;\r\n\t\t}\r\n\r\n\t\tthis.completedShape?.reset();\r\n\t\tthis.numberEntry?.reset();\r\n\t\tthis.tilesDrawn?.reset();\r\n\r\n\t\tthis.numberEntry.base.scrollIntoView();\r\n\t}\r\n}\r\n\r\n/* == EXPORTS =============================================================== */\r\nexport { baseSelector };\r\n","import { TurnType } from '01-global/enum';\r\nimport { PlayerSummary } from '01-global/interfaces/PlayerSummary';\r\nimport { Turn } from '01-global/interfaces/Turn';\r\nimport { PlayerManager } from '03-modules/PlayerManager';\r\nimport { BaseController } from '04-components/BaseController';\r\nimport { baseSelector, TurnInput } from '04-components/TurnInput/TurnInput';\r\nimport { scoreTurn } from '03-modules/scoring';\r\nimport { TurnSummary } from '01-global/interfaces/TurnSummary';\r\nimport { createLeaderboard } from '03-modules/leaderboard';\r\nimport { FlyOut } from '03-modules/fly-out';\r\n\r\n/* == INTERFACES ============================================================ */\r\ninterface Configuration {\r\n\tonRoundCompleted: (reason: RoundCompletedReason) => void;\r\n\tonTurnSubmitted: (turnSummary: TurnSummary) => void;\r\n\tselectors: Selectors;\r\n}\r\n\r\ninterface Selectors {\r\n\tflyOut: string;\r\n\tflyOutClose: string;\r\n\tleaderboard: string;\r\n}\r\n\r\n/* == CONSTANTS ============================================================= */\r\nexport enum RoundCompletedReason {\r\n\tRoundLocked = 'round-locked',\r\n\tRoundWon = 'round-won'\r\n}\r\n\r\nenum RoundType {\r\n\tDefault = 'default',\r\n\tRoundLocked = 'round-locked',\r\n\tRoundStart = 'round-start',\r\n\tRoundWon = 'round-won'\r\n}\r\n\r\nconst playerManager = PlayerManager.instance;\r\n\r\n/* == CLASS ================================================================= */\r\nexport class RoundController extends BaseController {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(readonly base: HTMLElement, private config: Configuration) {\r\n\t\tsuper(base);\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate _activePlayer: PlayerSummary;\r\n\tprivate _roundType: RoundType;\r\n\tprivate leaderboardFlyout: FlyOut;\r\n\tprivate leaderboard: HTMLElement;\r\n\tprivate maxPassedTurnStreak = 0;\r\n\tprivate passedTurnsStreak = 0;\r\n\tprivate turnInput: TurnInput = null;\r\n\r\n\t/* -- INSTANCE PROPERTIES ----------------------------------------------- */\r\n\tprivate get activePlayer(): PlayerSummary {\r\n\t\treturn this._activePlayer;\r\n\t}\r\n\tprivate set activePlayer(player: PlayerSummary) {\r\n\t\tthis._activePlayer = player;\r\n\t\tthis.header.title = player?.name;\r\n\t}\r\n\r\n\tprivate get roundType(): RoundType {\r\n\t\treturn this._roundType;\r\n\t}\r\n\tprivate set roundType(value: RoundType) {\r\n\t\tif (value === this._roundType) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._roundType = value;\r\n\r\n\t\tswitch (value) {\r\n\t\t\tcase RoundType.Default:\r\n\t\t\t\tthis.turnInput.turnType = TurnType.Default;\r\n\t\t\t\tthis.header.subtitle = 'turn in progress';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RoundType.RoundStart:\r\n\t\t\t\tthis.turnInput.turnType = TurnType.RoundStart;\r\n\t\t\t\tthis.header.subtitle = 'Eerste speelbeurt';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tthis.turnInput.turnType = TurnType.Collection;\r\n\t\t\t\tthis.header.subtitle = 'collecting points';\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/* -- EVENT HANDLING ---------------------------------------------------- */\r\n\tprotected onPrimaryAction(): void {\r\n\t\tconst turn = this.turnInput.turn;\r\n\t\tthis.processPlayerInput(turn);\r\n\t}\r\n\r\n\tprotected onSecondaryAction(): void {\r\n\t\tif (this.leaderboard === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.leaderboard.innerHTML = createLeaderboard(playerManager.players, {\r\n\t\t\tincludeTiles: true\r\n\t\t});\r\n\t\tthis.leaderboardFlyout.show();\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate goToNextPlayer(): void {\r\n\t\tthis.activePlayer = playerManager.activateNextPlayer();\r\n\t\tthis.turnInput.reset();\r\n\t}\r\n\r\n\tprivate processPassedTurn(): void {\r\n\t\tthis.passedTurnsStreak++;\r\n\r\n\t\tif (this.passedTurnsStreak === this.maxPassedTurnStreak) {\r\n\t\t\tthis.config.onRoundCompleted?.(RoundCompletedReason.RoundLocked);\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.goToNextPlayer();\r\n\t}\r\n\r\n\tprivate processPlayedTurn(): void {\r\n\t\tthis.passedTurnsStreak = 0;\r\n\t\tthis.roundType = RoundType.Default;\r\n\r\n\t\tif (playerManager.activePlayer.hasEmptyHand) {\r\n\t\t\tthis.config.onRoundCompleted?.(RoundCompletedReason.RoundWon);\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.goToNextPlayer();\r\n\t}\r\n\r\n\tprivate processPlayerInput(turn: Turn): void {\r\n\t\tconst turnSummary = scoreTurn(turn);\r\n\r\n\t\tplayerManager.updateActivePlayerScore(turnSummary.scoreDelta);\r\n\t\tplayerManager.updateActivePlayerTileCount(turnSummary.tileDelta);\r\n\t\tthis.config.onTurnSubmitted?.(turnSummary);\r\n\r\n\t\tif (turn.points === 0) {\r\n\t\t\tthis.processPassedTurn();\r\n\t\t} else {\r\n\t\t\tthis.processPlayedTurn();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate reset(): void {\r\n\t\tthis.maxPassedTurnStreak = playerManager.players.length;\r\n\t\tthis.passedTurnsStreak = 0;\r\n\t}\r\n\r\n\tprivate setup(): void {\r\n\t\tconst turnBase = this.base.querySelector(baseSelector) as HTMLElement;\r\n\t\tconst flyOutBase = this.base.querySelector(\r\n\t\t\tthis.config.selectors.flyOut\r\n\t\t) as HTMLElement;\r\n\t\tconst flyOutClose = this.base.querySelector(\r\n\t\t\tthis.config.selectors.flyOutClose\r\n\t\t) as HTMLElement;\r\n\t\tthis.leaderboard = this.base.querySelector(\r\n\t\t\tthis.config.selectors.leaderboard\r\n\t\t) as HTMLElement;\r\n\r\n\t\tif (baseSelector !== null) {\r\n\t\t\tthis.turnInput = new TurnInput(turnBase);\r\n\t\t}\r\n\t\tif (flyOutBase !== null) {\r\n\t\t\tthis.leaderboardFlyout = new FlyOut(flyOutBase);\r\n\t\t\tflyOutClose.addEventListener('click', () => this.leaderboardFlyout.hide());\r\n\t\t}\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\tstart(startingPlayerId: PlayerSummary['id']): void {\r\n\t\tthis.activePlayer = playerManager.setActivePlayer(startingPlayerId);\r\n\r\n\t\tthis.reset();\r\n\r\n\t\tthis.roundType = RoundType.RoundStart;\r\n\t\tthis.turnInput.reset();\r\n\t}\r\n}\r\n","import { PlayerSummary } from '01-global/interfaces/PlayerSummary';\r\nimport { rankPlayers } from './scoring';\r\n\r\n/* == INTERFACES ============================================================ */\r\ninterface Configuration {\r\n\tincludeTiles: boolean;\r\n}\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst medals = ['🥇', '🥈', '🥉'];\r\n\r\n/* == PRIVATE METHODS ======================================================= */\r\nfunction createBody(\r\n\tplayers: PlayerSummary[],\r\n\tincludeTiles: Configuration['includeTiles']\r\n): string {\r\n\tconst ranking = rankPlayers(players);\r\n\tconst rows = players\r\n\t\t.map(player => {\r\n\t\t\tconst place = ranking.findIndex(id => id === player.id);\r\n\t\t\tconst medal = medals[place] ?? place + 1;\r\n\r\n\t\t\treturn `<tr>\r\n\t\t\t<td>${medal}</td>\r\n\t\t\t<td>${player.name}</td>\r\n\t\t\t<td>${player.score}</td>\r\n\t\t\t${includeTiles ? `<td>${player.tileCount}</td>` : ''}\r\n\t\t</tr>`;\r\n\t\t})\r\n\t\t.join('');\r\n\r\n\treturn `<tbody>\r\n\t\t${rows}\r\n\t</tbody>`;\r\n}\r\n\r\nfunction createHeader(includeTiles: Configuration['includeTiles']): string {\r\n\treturn `<thead>\r\n\t\t<tr>\r\n\t\t\t<th></th>\r\n\t\t\t<th>Player</th>\r\n\t\t\t<th>Score</th>\r\n\t\t\t${includeTiles ? '<th>Tiles</th>' : ''}\r\n\t\t</tr>\r\n\t</thead>`;\r\n}\r\n\r\n/* == PUBLIC METHODS ======================================================== */\r\nexport function createLeaderboard(\r\n\tplayers: PlayerSummary[],\r\n\tconfig: Configuration\r\n): string {\r\n\treturn `<table class=\"c-leaderboard\">\r\n\t\t${createHeader(config.includeTiles)}\r\n\t\t${createBody(players, config.includeTiles)}\r\n\t</table>`;\r\n}\r\n","import { PlayerSummary } from '01-global/interfaces/PlayerSummary';\r\nimport { createLeaderboard } from '03-modules/leaderboard';\r\nimport { BaseController } from '04-components/BaseController';\r\n\r\n/* == INTERFACES ============================================================ */\r\ninterface Configuration {\r\n\tonStartNewGame: () => void;\r\n\tselectors: Selectors;\r\n}\r\n\r\ninterface Selectors {\r\n\tboard: string;\r\n}\r\n\r\n/* == CLASS ================================================================= */\r\nexport class LeaderboardController extends BaseController {\r\n\tconstructor(readonly base: HTMLElement, private config: Configuration) {\r\n\t\tsuper(base);\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate board: HTMLElement;\r\n\r\n\t/* -- PROTECTED METHODS ------------------------------------------------- */\r\n\tprotected onPrimaryAction(): void {\r\n\t\tthis.config.onStartNewGame?.();\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate setup(): void {\r\n\t\tthis.board = this.base.querySelector(\r\n\t\t\tthis.config.selectors.board\r\n\t\t) as HTMLElement;\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\tshowLeaderboard(players: PlayerSummary[]): void {\r\n\t\tif (this.board === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.board.innerHTML = createLeaderboard(players, {\r\n\t\t\tincludeTiles: false\r\n\t\t});\r\n\t}\r\n}\r\n","import { bind } from '02-utilities/decorators/bind';\r\n\r\n/* == TYPES ================================================================= */\r\ntype OnTimeOut = () => void;\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst cssClass = {\r\n\tactive: 'is-active'\r\n};\r\n\r\n/* == CLASS ================================================================= */\r\nexport class TimedButton {\r\n\tconstructor(readonly base: HTMLElement, private callback: OnTimeOut) {\r\n\t\tthis.bindEvents();\r\n\t}\r\n\r\n\t/* -- EVENT HANDLING ---------------------------------------------------- */\r\n\tprivate bindEvents(): void {\r\n\t\tthis.base.addEventListener('transitionend', this.onTimeOut);\r\n\t}\r\n\r\n\t@bind\r\n\tprivate onTimeOut(event: TransitionEvent): void {\r\n\t\tif (event.propertyName === 'transform') {\r\n\t\t\tthis.callback?.();\r\n\t\t}\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\tstop(): void {\r\n\t\tthis.base.classList.remove(cssClass.active);\r\n\t}\r\n\r\n\tstart(): void {\r\n\t\tthis.base.classList.add(cssClass.active);\r\n\t}\r\n}\r\n","import { PlayerSummary } from '01-global/interfaces/PlayerSummary';\r\nimport { RemainingPoints } from '01-global/interfaces/RemainingPoints';\r\nimport { TurnSummary } from '01-global/interfaces/TurnSummary';\r\n\r\nimport { NavigationManager, Step } from '03-modules/NavigationManager';\r\nimport { PlayerManager } from '03-modules/PlayerManager';\r\nimport { getInitialTileCount, getRoundBonus } from '03-modules/rules';\r\nimport { awardRemainingPoints } from '03-modules/scoring';\r\n\r\nimport { BaseController } from '04-components/BaseController';\r\nimport { Dialog } from '04-components/Dialog';\r\n\r\nimport { GameStartController } from '05-widgets/controllers/GameStartController';\r\nimport { PlayerSelectController } from '05-widgets/controllers/PlayerSelectController';\r\nimport { PointCollectionController } from '05-widgets/controllers/PointCollectionController';\r\nimport { PointLimitController } from '05-widgets/controllers/PointLimitController';\r\nimport {\r\n\tRoundController,\r\n\tRoundCompletedReason\r\n} from '05-widgets/controllers/RoundController';\r\nimport { LeaderboardController } from '05-widgets/controllers/LeaderboardController';\r\n\r\nimport { TimedButton } from '04-components/TimedButton';\r\n\r\n/* == INTERFACES ============================================================ */\r\ninterface Configuration {\r\n\tlimitReached: boolean;\r\n\tpointsLimit: number;\r\n\tround: number;\r\n\troundReason: RoundCompletedReason;\r\n\tstartingPlayer: PlayerSummary | null;\r\n}\r\n\r\nenum StepId {\r\n\tNames = 'names',\r\n\tPlayerSelect = 'player-select',\r\n\tPointsLimit = 'points-limit',\r\n\tRound = 'round',\r\n\tCollection = 'collection',\r\n\tLeaderboard = 'leader-board'\r\n}\r\n\r\n/* == CONST ================================================================= */\r\nconst config: Configuration = {\r\n\tlimitReached: false,\r\n\tpointsLimit: 0,\r\n\tround: 1,\r\n\troundReason: RoundCompletedReason.RoundWon,\r\n\tstartingPlayer: null\r\n};\r\n\r\nconst dialogId = {\r\n\tgameWinner: 'game-winner',\r\n\tlastRound: 'last-round',\r\n\troundWinner: 'round-winner',\r\n\tturnPlayed: 'turn-played'\r\n};\r\n\r\nconst dialog = new Dialog();\r\n\r\n// const debugPlayers: PlayerSummary[] = [\r\n// \t{\r\n// \t\thasEmptyHand: false,\r\n// \t\tid: Symbol('Player__0'),\r\n// \t\tisActive: true,\r\n// \t\tname: 'Player 1',\r\n// \t\tscore: 10,\r\n// \t\ttileCount: 1\r\n// \t},\r\n// \t{\r\n// \t\thasEmptyHand: true,\r\n// \t\tid: Symbol('Player__1'),\r\n// \t\tisActive: false,\r\n// \t\tname: 'Player 2',\r\n// \t\tscore: 17,\r\n// \t\ttileCount: 1\r\n// \t},\r\n// \t{\r\n// \t\thasEmptyHand: false,\r\n// \t\tid: Symbol('Player__2'),\r\n// \t\tisActive: false,\r\n// \t\tname: 'Player 3',\r\n// \t\tscore: 3,\r\n// \t\ttileCount: 1\r\n// \t},\r\n// \t{\r\n// \t\thasEmptyHand: false,\r\n// \t\tid: Symbol('Player__2'),\r\n// \t\tisActive: false,\r\n// \t\tname: 'Player 4',\r\n// \t\tscore: 7,\r\n// \t\ttileCount: 1\r\n// \t}\r\n// ];\r\n\r\nconst playerManager = PlayerManager.instance;\r\nconst navigationManager = new NavigationManager(\r\n\t[\r\n\t\t{ id: StepId.Names },\r\n\t\t{ id: StepId.PointsLimit },\r\n\t\t{ id: StepId.PlayerSelect },\r\n\t\t{ id: StepId.Round },\r\n\t\t{ id: StepId.Collection },\r\n\t\t{ id: StepId.Leaderboard }\r\n\t],\r\n\t{\r\n\t\tinstanceFactory,\r\n\t\tonInstanceActivated\r\n\t}\r\n);\r\n\r\n/* == CALLBACKS ============================================================= */\r\nfunction onCancel(): void {\r\n\tnavigationManager.goBack();\r\n}\r\n\r\nfunction onInstanceActivated(step: Step): void {\r\n\tswitch (step.id) {\r\n\t\tcase StepId.Collection:\r\n\t\t\t(step.instance as PointCollectionController).setPlayers(\r\n\t\t\t\tplayerManager.players\r\n\t\t\t);\r\n\t\t\t// (step.instance as PointCollectionController).setPlayers(debugPlayers);\r\n\t\t\tbreak;\r\n\r\n\t\tcase StepId.Leaderboard:\r\n\t\t\t(step.instance as LeaderboardController).showLeaderboard(\r\n\t\t\t\tplayerManager.players\r\n\t\t\t);\r\n\t\t\t// (step.instance as LeaderboardController).showLeaderboard(debugPlayers);\r\n\t\t\tbreak;\r\n\r\n\t\tcase StepId.PlayerSelect:\r\n\t\t\t(step.instance as PlayerSelectController).setPlayers(playerManager.players);\r\n\t\t\t(step.instance as PlayerSelectController).round = config.round++;\r\n\t\t\tbreak;\r\n\r\n\t\tcase StepId.Round:\r\n\t\t\t// (step.instance as RoundController).start(Symbol());\r\n\t\t\t(step.instance as RoundController).start(config.startingPlayer.id);\r\n\t\t\tbreak;\r\n\t}\r\n}\r\n\r\nfunction onPlayersSelected(names: string[]): void {\r\n\tconst initialTileCount = getInitialTileCount(names.length);\r\n\r\n\tplayerManager.createPlayers(names, initialTileCount);\r\n\tnavigationManager.goForward();\r\n}\r\n\r\nfunction onPointsCollected(result: RemainingPoints[]): void {\r\n\tconst winner = awardRemainingPoints(result);\r\n\tconst name =\r\n\t\tplayerManager.players.find(player => player.id === winner.id)?.name ?? '';\r\n\r\n\tplayerManager.updatePlayerScore(winner.id, winner.points);\r\n\r\n\tshowRoundWinnerDialog(winner.points, name);\r\n}\r\n\r\nfunction onPointLimitSet(points: number): void {\r\n\tconfig.pointsLimit = points;\r\n\tnavigationManager.goForward();\r\n}\r\n\r\nfunction onRoundCompleted(): void {\r\n\tif (config.roundReason === RoundCompletedReason.RoundWon) {\r\n\t\tplayerManager.updateActivePlayerScore(getRoundBonus());\r\n\t}\r\n\tconfig.limitReached = false;\r\n\tnavigationManager.goForward();\r\n}\r\n\r\nfunction onStartingPlayerSelected(player: PlayerSummary): void {\r\n\tconfig.startingPlayer = player;\r\n\tnavigationManager.goForward();\r\n}\r\n\r\nfunction onTurnSubmitted(turn: TurnSummary): void {\r\n\tconst canShowLimitDialog = !config.limitReached;\r\n\r\n\tconfig.limitReached =\r\n\t\tconfig.limitReached || playerManager.activePlayer.score >= config.pointsLimit;\r\n\tconst onClose =\r\n\t\tcanShowLimitDialog && config.limitReached ? showLastRoundDialog : undefined;\r\n\r\n\tshowTurnPlayedDialog(turn.scoreDelta, onClose);\r\n}\r\n\r\nfunction onStartNewGame(): void {\r\n\tnavigationManager.goTo(StepId.Names);\r\n}\r\n\r\n/* == PRIVATE METHODS ======================================================= */\r\nfunction instanceFactory(id: string): BaseController | null {\r\n\t// eslint-disable-line complexity\r\n\tswitch (id) {\r\n\t\tcase StepId.Collection:\r\n\t\t\treturn initCollectionController();\r\n\r\n\t\tcase StepId.Leaderboard:\r\n\t\t\treturn initLeaderboardController();\r\n\r\n\t\tcase StepId.Names:\r\n\t\t\treturn initGameStartController();\r\n\r\n\t\tcase StepId.PlayerSelect:\r\n\t\t\treturn initPlayerSelectController();\r\n\r\n\t\tcase StepId.PointsLimit:\r\n\t\t\treturn initPointLimitController();\r\n\r\n\t\tcase StepId.Round:\r\n\t\t\treturn initRoundController();\r\n\r\n\t\tdefault:\r\n\t\t\treturn null;\r\n\t}\r\n}\r\n\r\nfunction showGameWinnerDialog(): void {\r\n\tconst winner = playerManager.firstRankedPlayer;\r\n\r\n\tdialog.showDialog(dialogId.gameWinner, {\r\n\t\tonClose: () => navigationManager.goForward(),\r\n\t\tplaceholders: {\r\n\t\t\tname: winner.name,\r\n\t\t\tscore: winner.score.toString(10)\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction showLastRoundDialog(): void {\r\n\tdialog.showDialog(dialogId.lastRound, {\r\n\t\tplaceholders: {\r\n\t\t\tname: playerManager.activePlayer.name,\r\n\t\t\tlimit: config.pointsLimit.toString(10)\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction showRoundWinnerDialog(points: number, name: string): void {\r\n\tdialog.showDialog(dialogId.roundWinner, {\r\n\t\tonClose: () => {\r\n\t\t\tif (config.limitReached) {\r\n\t\t\t\tsetTimeout(showGameWinnerDialog, 0);\r\n\t\t\t} else {\r\n\t\t\t\tnavigationManager.goTo(StepId.PlayerSelect);\r\n\t\t\t}\r\n\t\t},\r\n\t\tplaceholders: {\r\n\t\t\tname,\r\n\t\t\tpoints: points.toString(10)\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction showTurnPlayedDialog(delta: number, onClose): void {\r\n\tconst formattedDelta = `${delta > 0 ? '+' : ''}${delta}`;\r\n\tconst onBeforeShow = (content: HTMLElement) => {\r\n\t\tconst button = content.querySelector('.js-dialog__close') as HTMLElement;\r\n\t\tif (button === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst timedButton = new TimedButton(button, () => dialog.hideDialog());\r\n\t\tsetTimeout(() => timedButton.start(), 0);\r\n\t};\r\n\r\n\tdialog.showDialog(dialogId.turnPlayed, {\r\n\t\tonBeforeShow,\r\n\t\tonClose,\r\n\t\tplaceholders: {\r\n\t\t\tdelta: formattedDelta,\r\n\t\t\tname: playerManager.activePlayer.name,\r\n\t\t\tscore: playerManager.activePlayer.score.toString(10)\r\n\t\t}\r\n\t});\r\n}\r\n\r\n/* == INIT ================================================================== */\r\nfunction init(): void {\r\n\t//\r\n}\r\n\r\nfunction initCollectionController(): PointCollectionController | null {\r\n\tconst base = document.querySelector('.js-point-collection') as HTMLElement;\r\n\r\n\treturn base === null\r\n\t\t? null\r\n\t\t: new PointCollectionController(base, {\r\n\t\t\t\tisVisible: false,\r\n\t\t\t\tonPointsCollected: onPointsCollected,\r\n\t\t\t\tselectors: {\r\n\t\t\t\t\tflyOut: '.js-point-collection__fly-out',\r\n\t\t\t\t\tnumberEntry: '.js-point-collection__number-entry',\r\n\t\t\t\t\tplayerList: '.js-point-collection__list',\r\n\t\t\t\t\tsetPoints: '.js-point-collection__set-points'\r\n\t\t\t\t},\r\n\t\t\t\ttranslations: {\r\n\t\t\t\t\theaderPrompt: 'Select a player'\r\n\t\t\t\t},\r\n\t\t\t\twarningId: 'warning-points-missing'\r\n\t\t  });\r\n}\r\n\r\nfunction initGameStartController(): GameStartController | null {\r\n\tconst base = document.querySelector('.js-game-start') as HTMLElement;\r\n\r\n\treturn base\r\n\t\t? new GameStartController(base, {\r\n\t\t\t\tonPlayersSelected: onPlayersSelected,\r\n\t\t\t\tselectors: {\r\n\t\t\t\t\tform: ''\r\n\t\t\t\t},\r\n\t\t\t\twarningId: 'warning-required-players'\r\n\t\t  })\r\n\t\t: null;\r\n}\r\n\r\nfunction initLeaderboardController(): LeaderboardController | null {\r\n\tconst base = document.querySelector('.js-leaderboard') as HTMLElement;\r\n\r\n\treturn base === null\r\n\t\t? null\r\n\t\t: new LeaderboardController(base, {\r\n\t\t\t\tonStartNewGame,\r\n\t\t\t\tselectors: {\r\n\t\t\t\t\tboard: '.js-leaderboard__board'\r\n\t\t\t\t}\r\n\t\t  });\r\n}\r\n\r\nfunction initPointLimitController(): PointLimitController | null {\r\n\tconst base = document.querySelector('.js-point-limit') as HTMLElement;\r\n\r\n\treturn base === null\r\n\t\t? null\r\n\t\t: new PointLimitController(base, {\r\n\t\t\t\tdefaultPoints: 200,\r\n\t\t\t\tisVisible: false,\r\n\t\t\t\tonCancel,\r\n\t\t\t\tonLimitSet: onPointLimitSet,\r\n\t\t\t\tpointsValidation: {\r\n\t\t\t\t\tminimum: 100,\r\n\t\t\t\t\tmaximum: 1000,\r\n\t\t\t\t\twarningId: 'warning-invalid-points-limit'\r\n\t\t\t\t},\r\n\t\t\t\tselectors: {\r\n\t\t\t\t\tnumberEntry: '.js-point-limit__number-entry'\r\n\t\t\t\t}\r\n\t\t  });\r\n}\r\n\r\nfunction initPlayerSelectController(): PlayerSelectController | null {\r\n\tconst base = document.querySelector('.js-player-select') as HTMLElement;\r\n\r\n\treturn base === null\r\n\t\t? null\r\n\t\t: new PlayerSelectController(base, {\r\n\t\t\t\tisVisible: false,\r\n\t\t\t\tonCancel,\r\n\t\t\t\tonPlayerSelected: onStartingPlayerSelected,\r\n\t\t\t\tselectors: {\r\n\t\t\t\t\tnameList: '.js-player-select__list'\r\n\t\t\t\t},\r\n\t\t\t\twarningId: 'warning-select-starting-player'\r\n\t\t  });\r\n}\r\n\r\nfunction initRoundController(): RoundController | null {\r\n\tconst base = document.querySelector('.js-round') as HTMLElement;\r\n\r\n\treturn base === null\r\n\t\t? null\r\n\t\t: new RoundController(base, {\r\n\t\t\t\tonRoundCompleted: onRoundCompleted,\r\n\t\t\t\tonTurnSubmitted: onTurnSubmitted,\r\n\t\t\t\tselectors: {\r\n\t\t\t\t\tflyOut: '.js-round__fly-out',\r\n\t\t\t\t\tflyOutClose: '.js-round__fly-out-close',\r\n\t\t\t\t\tleaderboard: '.js-round__leaderboard'\r\n\t\t\t\t}\r\n\t\t  });\r\n}\r\n\r\ninit();\r\n"],"sourceRoot":""}