{"version":3,"sources":["webpack://scoreminos/./src/scripts/01-global/enum/RoundStatus.ts","webpack://scoreminos/./src/scripts/01-global/enum/Shape.ts","webpack://scoreminos/./src/scripts/01-global/enum/StepId.ts","webpack://scoreminos/./src/scripts/01-global/enum/TurnType.ts","webpack://scoreminos/./src/scripts/01-global/manager/NavigationManager.ts","webpack://scoreminos/./src/scripts/01-global/decorator/bind.ts","webpack://scoreminos/./src/scripts/01-global/model/Player.ts","webpack://scoreminos/./src/scripts/01-global/manager/PlayerManager.ts","webpack://scoreminos/./src/scripts/01-global/utility/rules.ts","webpack://scoreminos/./src/scripts/01-global/utility/scoring.ts","webpack://scoreminos/./src/scripts/01-global/utility/dom.ts","webpack://scoreminos/./src/scripts/02-components/Header.ts","webpack://scoreminos/./src/scripts/02-components/Footer.ts","webpack://scoreminos/./src/scripts/02-components/BaseViewController.ts","webpack://scoreminos/./src/scripts/02-components/PlayerInput.ts","webpack://scoreminos/./src/scripts/01-global/utility/error-message.ts","webpack://scoreminos/./src/scripts/03-domain/view-controller/GameStartController.ts","webpack://scoreminos/./src/scripts/02-components/leaderboard.ts","webpack://scoreminos/./src/scripts/03-domain/view-controller/LeaderboardController.ts","webpack://scoreminos/./src/scripts/02-components/FlyIn.ts","webpack://scoreminos/./src/scripts/03-domain/view-controller/LeaderboardFlyInController.ts","webpack://scoreminos/./src/scripts/03-domain/view-controller/PlayerSelectController.ts","webpack://scoreminos/./src/scripts/02-components/NumberPad.ts","webpack://scoreminos/./src/scripts/02-components/NumberEntry.ts","webpack://scoreminos/./src/scripts/03-domain/view-controller/PointCollectionController.ts","webpack://scoreminos/./src/scripts/02-components/player-points-button.ts","webpack://scoreminos/./src/scripts/03-domain/view-controller/PointLimitController.ts","webpack://scoreminos/./src/scripts/02-components/Dialog.ts","webpack://scoreminos/./src/scripts/02-components/TimedButton.ts","webpack://scoreminos/./src/scripts/03-domain/dialog.ts","webpack://scoreminos/./src/scripts/02-components/CheckboxGroup.ts","webpack://scoreminos/./src/scripts/02-components/TurnInput.ts","webpack://scoreminos/./src/scripts/03-domain/view-controller/TurnController.ts","webpack://scoreminos/./src/scripts/03-domain/round-controller.ts","webpack://scoreminos/./src/scripts/main.ts"],"names":["RoundStatus","Shape","StepId","TurnType","NavigationManager","steps","config","this","setup","findIndex","step","id","activeStepId","undefined","activeIndex","setVisibility","onInstanceActivated","call","instance","instanceFactory","firstStep","activateStep","isVisible","getInstance","deactivateStep","length","find","bind","target","propertyKey","descriptor","value","TypeError","configurable","get","bound","Object","defineProperty","writable","Player","name","tileCount","_id","Symbol","_tiles","_score","count","delta","singletonEnforcer","PlayerManager","enforcer","_instance","_activePlayer","createPlayerSummary","player","_players","reduce","result","score","map","hasEmptyHand","isActive","players","names","initialTileCount","tilesPerRound","forEach","setTileCount","updateScore","updateTileCount","initialTiles","shapeBonus","Bridge","DoubleSided","Hexagon","dummyWinner","points","Infinity","calculateScore","turn","turnType","Default","tilesDrawn","shape","passPenalty","completedShape","scoreDefaultTurn","RoundStart","isTriple","scoreRoundStart","calculateTileDelta","classByPredicate","cssClass","predicate","manipulation","classList","baseSelector","selector","subtitle","title","Header","base","_subtitle","textContent","updateSubtitle","_title","querySelector","hasSubtitle","buttonPrimary","buttonSecondary","Footer","bindEvents","primaryButton","addEventListener","onPrimaryButtonClicked","secondaryButton","onSecondaryButtonClicked","event","onPerformPrimaryAction","onPerformSecondaryAction","disabled","BaseController","setupBase","hidden","footer","secondaryTitle","headerBase","headerBaseSelector","footerBase","footerBaseSelector","header","onPrimaryAction","onSecondaryAction","PlayerInput","getPlayerNames","inputs","querySelectorAll","Array","from","input","trim","filter","defaultConfig","messageSelector","scrollToVisible","updateMessageVisibility","scope","visibleIds","configuration","messages","message","includes","firstMessage","scrollIntoView","behavior","GameStartController","playerNames","playerInput","isValid","updateWarningVisibility","onPlayersSelected","playerInputBase","playerInputSelector","hide","warningId","medals","createBody","includeTiles","ranking","temp","sort","a","b","rankPlayers","rows","place","medal","join","createLeaderboard","LeaderboardController","onStartNewGame","board","selectors","innerHTML","FlyIn","background","onShown","onHidden","onTransitionEnd","remove","setTimeout","add","LeaderboardFlyInController","closeTrigger","document","flyOutController","show","PlayerSelectController","_round","Number","isFinite","updateHeader","onCancel","selectedPlayer","getSelectedPlayer","onPlayerSelected","selectedInput","summary","listElement","nameList","renderPlayer","round","index","renderPlayersList","attributeName","button","NumberPad","callback","_value","parseInt","toString","onClick","closest","hasAttribute","processAction","getAttribute","processValue","selectedAction","slice","reset","NumberEntry","numberPad","showPoints","onPointsChanged","display","numberPadBase","defaultPoints","attribute","PointCollectionController","flyIn","playerId","prepareFlyInView","showFlyIn","appendChild","numberEntry","getPlayersWithoutPoints","onPointsCollected","getDisabledAttribute","getRoundWinnerDescription","getSetPointsPrompt","getSetPoints","createPlayerButton","playerList","setupFlyIn","numberEntryBase","onClicked","flyInTitle","flyInBase","flyOut","flyInBackground","onFlyInHidden","setPoints","onSetPoints","cancelSetPoints","onCancelSetPoints","flyInPortal","PointLimitController","pointsValidation","setLimit","minimum","maximum","onLimitSet","container","portal","dialogCloseTriggerSelector","Dialog","hideDialog","onClose","content","placeholders","keys","element","template","getElementById","firstElementChild","cloneNode","removeChild","closeCallback","options","getDialogContent","fillPlaceholders","bindCloseEvent","onBeforeShow","TimedButton","onTimeOut","propertyName","dialog","CheckboxGroup","selectedCheckbox","onCheckboxSelected","checkbox","checked","selectedValue","initialCheckbox","form","playedTriple","playedTripleContainer","TurnInput","convertInputToObject","_turnType","newState","updateVisualState","hasPlayedTriple","RoundController","setTurnType","turnInput","onTurnSubmitted","onShowLeaderboard","turnBase","playerName","leaderboardFlyoutBase","playerManager","InProgress","status","activePlayer","passedTurnStreak","maxPassedTurnStreak","_viewController","processTurn","determineStatus","state","Locked","canProceedToNextPlayer","activateNextPlayer","play","RoundViewController","goToNextPlayer","numberOfPlayers","viewController","limitReached","pointsLimit","startingPlayer","navigationManager","Names","PointsLimit","PlayerSelect","Round","Collection","Leaderboard","initLeaderboardController","initGameStartController","onStartingPlayerSecondaryAction","onStartingPlayerSelected","initPlayerSelectController","onPointLimitSet","initPointLimitController","showLeaderboardFlyin","initRoundController","setPlayers","showLeaderboard","secondaryActionTitle","isFirstRound","startRound","goBack","playerCount","correctedIndex","Math","min","max","createPlayers","goForward","winner","remainingPoints","entry","total","awardRemainingPoints","updatePlayerScore","showDialog","showRoundWinnerDialog","onRoundWinnerDialogClosed","firstRankedPlayer","showGameWinnerDialog","goTo","setActivePlayer","resetTileCount","report","turnSummary","scoreDelta","tileDelta","updateActivePlayerScore","updateActivePlayerTileCount","Won","addScoreForActivePlayer","canShowLimitDialog","currentPlayer","currentPlayerName","limit","showLastRoundDialog","playNextTurn","formattedDelta","timedButton","start","showTurnPlayedDialog","showTiles","leaderBoardFlyOut","activeStep","continueRound"],"mappings":"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","file":"js/main.f3843c7e.js","sourcesContent":["export enum RoundStatus {\r\n\t/**\r\n\t * The round is still being played.\r\n\t */\r\n\tInProgress = 'in-progress',\r\n\r\n\t/**\r\n\t * All players have been unable to play a tile, the round is locked.\r\n\t */\r\n\tLocked = 'locked'\r\n}\r\n","export enum Shape {\r\n\tBridge = 'bridge',\r\n\tDoubleSided = 'double-sided',\r\n\tHexagon = 'hexagon'\r\n}\r\n","export enum StepId {\r\n\tNames = 'names',\r\n\tPlayerSelect = 'player-select',\r\n\tPointsLimit = 'points-limit',\r\n\tRound = 'round',\r\n\tCollection = 'collection',\r\n\tLeaderboard = 'leader-board'\r\n}\r\n","export enum TurnType {\r\n\t/**\r\n\t * The default state is for a regular turn. It allows the user to specify\r\n\t * the number of points played as well as how many tiles were drawn and if\r\n\t * a special shape has been completed in the turn.\r\n\t */\r\n\tDefault = 'default',\r\n\r\n\t/**\r\n\t * In the round start only the number pad and the control to indicate a trio\r\n\t * has been played will be displayed.\r\n\t */\r\n\tRoundStart = 'round-start'\r\n}\r\n","import { ManagedViewController } from '01-global/interface';\r\n\r\n/* == INTERFACES ============================================================ */\r\ninterface Configuration {\r\n\tinstanceFactory: (id: string) => ManagedViewController | null;\r\n\tonInstanceActivated: (step: Step) => void;\r\n}\r\n\r\nexport interface Step {\r\n\tid: string;\r\n\tinstance?: ManagedViewController;\r\n}\r\n\r\n/* == CLASS ================================================================= */\r\nexport class NavigationManager {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(private steps: Step[], private config: Configuration) {\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate activeStepId?: string;\r\n\r\n\t/* -- INSTANCE PROPERTIES ----------------------------------------------- */\r\n\tprivate get activeIndex(): number | undefined {\r\n\t\treturn this.steps?.findIndex(step => step.id === this.activeStepId);\r\n\t}\r\n\r\n\tget activeStep(): Step | undefined {\r\n\t\treturn this.activeIndex === undefined\r\n\t\t\t? undefined\r\n\t\t\t: this.steps[this.activeIndex];\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate activateStep(step: Step): void {\r\n\t\tthis.setVisibility(step, true);\r\n\t\tthis.activeStepId = step.id;\r\n\t\tthis.config.onInstanceActivated?.call(this, step);\r\n\t}\r\n\r\n\tprivate deactivateStep(step: Step): void {\r\n\t\tthis.setVisibility(step, false);\r\n\t}\r\n\r\n\tprivate getInstance(step: Step): ManagedViewController | undefined {\r\n\t\tif (!step.instance) {\r\n\t\t\tstep.instance = this.config.instanceFactory(step.id) ?? undefined;\r\n\t\t}\r\n\r\n\t\treturn step.instance;\r\n\t}\r\n\r\n\tprivate setup() {\r\n\t\tconst [firstStep] = this.steps;\r\n\t\tthis.activateStep(firstStep);\r\n\t}\r\n\r\n\tprivate setVisibility(step: Step, isVisible: boolean): boolean {\r\n\t\tconst instance = this.getInstance(step);\r\n\t\tif (!instance) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tinstance.isVisible = isVisible;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\tgoBack(): void {\r\n\t\tconst activeIndex = this.activeIndex;\r\n\t\tif (activeIndex === undefined || activeIndex === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.deactivateStep(this.steps[activeIndex]);\r\n\t\tthis.activateStep(this.steps[activeIndex - 1]);\r\n\t}\r\n\r\n\tgoForward(): void {\r\n\t\tconst activeIndex = this.activeIndex;\r\n\t\tif (activeIndex === undefined || activeIndex === this.steps.length - 11) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.deactivateStep(this.steps[activeIndex]);\r\n\t\tthis.activateStep(this.steps[activeIndex + 1]);\r\n\t}\r\n\r\n\tgoTo(id: string): void {\r\n\t\tconst step = this.steps.find(step => step.id === id);\r\n\t\tif (step === undefined) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.deactivateStep(this.steps[this.activeIndex]);\r\n\t\tthis.activateStep(step);\r\n\t}\r\n}\r\n","/* eslint-disable @typescript-eslint/ban-types */\r\n\r\n/*\r\n |------------------------------------------------------------------------------\r\n | Bind context decorator\r\n |------------------------------------------------------------------------------\r\n |\r\n | Can be used to bind the this value of a property or method to the class\r\n | in which it is defined.\r\n |\r\n | Source: https://www.npmjs.com/package/bind-decorator\r\n |\r\n */\r\n\r\nexport function bind<T extends Function>(\r\n\ttarget: object,\r\n\tpropertyKey: string,\r\n\tdescriptor: TypedPropertyDescriptor<T>\r\n): TypedPropertyDescriptor<T> | void {\r\n\tif (!descriptor || typeof descriptor.value !== 'function') {\r\n\t\tthrow new TypeError(\r\n\t\t\t`Only methods can be decorated with @bind. <${propertyKey}> is not a method!`\r\n\t\t);\r\n\t}\r\n\r\n\treturn {\r\n\t\tconfigurable: true,\r\n\t\tget(this: T): T {\r\n\t\t\tconst bound: T = descriptor.value?.bind(this);\r\n\t\t\t// Credits to https://github.com/andreypopp/autobind-decorator for\r\n\t\t\t// memoizing the result of bind against a symbol on the instance.\r\n\t\t\tObject.defineProperty(this, propertyKey, {\r\n\t\t\t\tvalue: bound,\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\twritable: true\r\n\t\t\t});\r\n\r\n\t\t\treturn bound;\r\n\t\t}\r\n\t};\r\n}\r\n","/* == PRIVATE FIELDS ======================================================== */\r\nlet id = 0;\r\n\r\n/* == CLASS ================================================================= */\r\nexport class Player {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(public name: string, tileCount: number) {\r\n\t\tthis._id = Symbol(`player__${id++}`);\r\n\t\tthis._tiles = tileCount;\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate _id: symbol;\r\n\tprivate _score = 0;\r\n\tprivate _tiles: number;\r\n\r\n\t/* -- INSTANCE PROPERTIES ----------------------------------------------- */\r\n\tget hasEmptyHand(): boolean {\r\n\t\treturn this._tiles === 0;\r\n\t}\r\n\r\n\tget id(): symbol {\r\n\t\treturn this._id;\r\n\t}\r\n\r\n\tget score(): number {\r\n\t\treturn this._score;\r\n\t}\r\n\r\n\tget tileCount(): number {\r\n\t\treturn this._tiles;\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\tsetTileCount(count: number): void {\r\n\t\tthis._tiles = count;\r\n\t}\r\n\r\n\tupdateScore(delta: number): number {\r\n\t\tthis._score += delta;\r\n\r\n\t\treturn this._score;\r\n\t}\r\n\r\n\tupdateTileCount(delta: number): number {\r\n\t\tthis._tiles += delta;\r\n\r\n\t\treturn this._tiles;\r\n\t}\r\n}\r\n","import { PlayerSummary } from '01-global/interface';\r\nimport { bind } from '01-global/decorator/bind';\r\nimport { Player } from '01-global/model/Player';\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst singletonEnforcer = Symbol('singleton');\r\n\r\n/* == CLASS ================================================================= */\r\nexport class PlayerManager {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(enforcer: symbol) {\r\n\t\tif (enforcer !== singletonEnforcer) {\r\n\t\t\tthrow 'Use the static property instance to get the PlayerManager';\r\n\t\t}\r\n\t}\r\n\r\n\t/* -- SINGLETON --------------------------------------------------------- */\r\n\tprivate static _instance: PlayerManager | null = null;\r\n\tstatic get instance(): PlayerManager {\r\n\t\tif (PlayerManager._instance === null) {\r\n\t\t\tPlayerManager._instance = new PlayerManager(singletonEnforcer);\r\n\t\t}\r\n\r\n\t\treturn PlayerManager._instance;\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate activeIndex: number | null = null;\r\n\tprivate _activePlayer: Player | null = null;\r\n\tprivate tilesPerRound: number | undefined;\r\n\tprivate _players: Player[] = [];\r\n\r\n\tget activePlayer(): PlayerSummary | null {\r\n\t\treturn this._activePlayer === null\r\n\t\t\t? null\r\n\t\t\t: this.createPlayerSummary(this._activePlayer);\r\n\t}\r\n\r\n\tget firstRankedPlayer(): PlayerSummary {\r\n\t\tconst player = this._players.reduce(\r\n\t\t\t(result, player) => {\r\n\t\t\t\treturn player.score > result.score ? player : result;\r\n\t\t\t},\r\n\t\t\t{ score: -Infinity } as Player\r\n\t\t);\r\n\r\n\t\treturn this.createPlayerSummary(player);\r\n\t}\r\n\r\n\tget numberOfPlayers(): number {\r\n\t\treturn this._players.length;\r\n\t}\r\n\r\n\tget players(): PlayerSummary[] {\r\n\t\treturn this._players.map(this.createPlayerSummary);\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\t@bind\r\n\tprivate createPlayerSummary(player: Player): PlayerSummary {\r\n\t\treturn {\r\n\t\t\thasEmptyHand: player.hasEmptyHand,\r\n\t\t\tid: player.id,\r\n\t\t\tisActive: this._activePlayer?.id === player.id,\r\n\t\t\tname: player.name,\r\n\t\t\tscore: player.score,\r\n\t\t\ttileCount: player.tileCount\r\n\t\t};\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\tactivateNextPlayer(): PlayerSummary | null {\r\n\t\tif (this.activeIndex === null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tthis.activeIndex = (this.activeIndex + 1) % this._players.length;\r\n\t\tthis._activePlayer = this._players[this.activeIndex];\r\n\r\n\t\treturn this.players[this.activeIndex];\r\n\t}\r\n\r\n\tcreatePlayers(names: Player['name'][], initialTileCount: number): void {\r\n\t\tthis.activeIndex = null;\r\n\t\tthis._activePlayer = null;\r\n\t\tthis.tilesPerRound = initialTileCount;\r\n\r\n\t\tthis._players = names.map(name => new Player(name, initialTileCount));\r\n\t}\r\n\r\n\tsetActivePlayer(id: Player['id']): PlayerSummary {\r\n\t\tthis.activeIndex = this._players.findIndex(player => player.id === id);\r\n\t\tthis._activePlayer = this._players[this.activeIndex];\r\n\r\n\t\treturn this.players[this.activeIndex];\r\n\t}\r\n\r\n\tresetTileCount(): void {\r\n\t\tthis._players.forEach(player => player.setTileCount(this.tilesPerRound ?? 0));\r\n\t}\r\n\r\n\tupdateActivePlayerScore(delta: number): number {\r\n\t\treturn this._activePlayer?.updateScore(delta) ?? 0;\r\n\t}\r\n\r\n\tupdateActivePlayerTileCount(delta: number): number {\r\n\t\treturn this._activePlayer?.updateTileCount(delta) ?? 0;\r\n\t}\r\n\r\n\tupdatePlayerScore(id: Player['id'], delta: number): number {\r\n\t\tconst player = this._players.find(player => player.id === id);\r\n\r\n\t\treturn player?.updateScore(delta) ?? 0;\r\n\t}\r\n}\r\n","import { Shape } from '01-global/enum';\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst tileDrawPenalty = -5;\r\nconst initialTiles = [\r\n\t9, // 2\r\n\t7, // 3\r\n\t7, // 4\r\n\t6, // 5\r\n\t6 // 6\r\n];\r\nconst roundBonus = 25;\r\nconst shapeBonus = {\r\n\t[Shape.Bridge]: 40,\r\n\t[Shape.DoubleSided]: 40,\r\n\t[Shape.Hexagon]: 50\r\n};\r\nconst passPenalty = -10;\r\n\r\n/* == PUBLIC METHODS ======================================================== */\r\nexport function getDrawnTilesPenalty(tilesDrawn?: number): number {\r\n\treturn (tilesDrawn ?? 0) * tileDrawPenalty;\r\n}\r\n\r\nexport function getInitialTileCount(playerCount: number): number {\r\n\tconst correctedIndex = Math.min(Math.max(0, playerCount - 2), 4);\r\n\r\n\treturn initialTiles[correctedIndex];\r\n}\r\n\r\nexport function getOpeningBonus(playedPoints: number): number {\r\n\treturn playedPoints === 0 ? 40 : 10;\r\n}\r\n\r\nexport function getRoundBonus(): number {\r\n\treturn roundBonus;\r\n}\r\n\r\nexport function getPassPenalty(): number {\r\n\treturn passPenalty;\r\n}\r\n\r\nexport function getShapeBonus(shape?: Shape): number {\r\n\treturn shape === undefined ? 0 : shapeBonus[shape];\r\n}\r\n","import {\r\n\tPlayerPoints,\r\n\tPlayerSummary,\r\n\tRemainingPoints,\r\n\tTurn,\r\n\tTurnSummary\r\n} from '01-global/interface';\r\nimport { TurnType } from '01-global/enum';\r\nimport {\r\n\tgetDrawnTilesPenalty,\r\n\tgetOpeningBonus,\r\n\tgetPassPenalty,\r\n\tgetRoundBonus,\r\n\tgetShapeBonus\r\n} from './rules';\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst dummyWinner: RemainingPoints = {\r\n\tid: Symbol('dummy'),\r\n\tpoints: Infinity\r\n};\r\n\r\n/* == PRIVATE METHODS ======================================================= */\r\nfunction calculateScore(turn: Turn): number {\r\n\tswitch (turn.turnType) {\r\n\t\tcase TurnType.Default:\r\n\t\t\treturn scoreDefaultTurn(turn);\r\n\r\n\t\tcase TurnType.RoundStart:\r\n\t\t\treturn scoreRoundStart(turn);\r\n\r\n\t\tdefault:\r\n\t\t\treturn 0;\r\n\t}\r\n}\r\n\r\nfunction calculateTileDelta(turn: Turn): number {\r\n\tconst tilePlayed = turn.points === undefined ? 0 : -1;\r\n\r\n\treturn tilePlayed + (turn.tilesDrawn ?? 0);\r\n}\r\n\r\nfunction scoreDefaultTurn(turn: Turn): number {\r\n\tconst passPenalty = turn.points === undefined ? getPassPenalty() : 0;\r\n\r\n\treturn (\r\n\t\t(turn.points ?? 0) +\r\n\t\tgetShapeBonus(turn.completedShape) +\r\n\t\tgetDrawnTilesPenalty(turn.tilesDrawn) +\r\n\t\tpassPenalty\r\n\t);\r\n}\r\n\r\nfunction scoreRoundStart(turn: Turn): number {\r\n\tconst points = turn.points ?? 0;\r\n\tconst bonusPoints = turn.isTriple ? getOpeningBonus(points) : 0;\r\n\r\n\treturn points + bonusPoints;\r\n}\r\n\r\n/* == PUBLIC METHODS ======================================================== */\r\nexport function awardRemainingPoints(\r\n\tremainingPoints: RemainingPoints[]\r\n): RemainingPoints {\r\n\t// The winner is the player with the least remaining points.\r\n\tconst winner = remainingPoints.reduce((winner, entry) => {\r\n\t\treturn entry.points < winner.points ? entry : winner;\r\n\t}, dummyWinner);\r\n\r\n\tconst remainingPlayers = remainingPoints.filter(\r\n\t\tentry => entry.id !== winner.id\r\n\t);\r\n\tconst points = remainingPlayers.reduce(\r\n\t\t(total, entry) => total + entry.points,\r\n\t\t0\r\n\t);\r\n\r\n\treturn {\r\n\t\tid: winner.id,\r\n\t\tpoints: points - winner.points\r\n\t};\r\n}\r\n\r\nexport function rankPlayers(players: PlayerSummary[]): PlayerSummary['id'][] {\r\n\tconst temp = [...players];\r\n\ttemp.sort((a, b) => b.score - a.score);\r\n\r\n\treturn temp.map(player => player.id);\r\n}\r\n\r\nexport function scoreLockedRound(\r\n\tpointsPerPlayer: PlayerPoints[]\r\n): PlayerPoints {\r\n\tconst winner = pointsPerPlayer.reduce((winner, player) => {\r\n\t\treturn player.points < winner.points ? player : winner;\r\n\t}, dummyWinner);\r\n\tconst points = pointsPerPlayer\r\n\t\t.filter(player => player.id !== winner.id)\r\n\t\t.reduce((total, player) => total + player.points, 0);\r\n\r\n\treturn {\r\n\t\tid: winner.id,\r\n\t\tpoints: points - winner.points\r\n\t};\r\n}\r\n\r\nexport function scoreTurn(turn: Turn): TurnSummary {\r\n\treturn {\r\n\t\tscoreDelta: calculateScore(turn),\r\n\t\ttileDelta: calculateTileDelta(turn)\r\n\t};\r\n}\r\n\r\nexport function scoreWonRound(pointsPerPlayer: PlayerPoints[]): number {\r\n\treturn (\r\n\t\tpointsPerPlayer.reduce((total, player) => total + player.points, 0) +\r\n\t\tgetRoundBonus()\r\n\t);\r\n}\r\n","/* == PUBLIC METHODS ======================================================== */\r\nexport function classByPredicate(\r\n\ttarget: HTMLElement,\r\n\tcssClass: string,\r\n\tpredicate: boolean\r\n): void {\r\n\tconst manipulation = predicate ? 'add' : 'remove';\r\n\ttarget.classList[manipulation](cssClass);\r\n}\r\n","import { classByPredicate } from '01-global/utility/dom';\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst moduleName = 'header';\r\nconst baseSelector = `.js-${moduleName}`;\r\nconst cssClass = {\r\n\thasSubtitle: 'c-header--has-subtitle'\r\n};\r\nconst selector = {\r\n\tsubtitle: `${baseSelector}__subtitle`,\r\n\ttitle: `${baseSelector}__title`\r\n};\r\n\r\n/* == CLASS ================================================================= */\r\nexport class Header {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(readonly base: HTMLElement) {\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate _subtitle: HTMLElement;\r\n\tprivate _title: HTMLElement;\r\n\r\n\t/* -- INSTANCE PROPERTIES ----------------------------------------------- */\r\n\t/* --[ HAS-SUBTITLE ]-- */\r\n\tget hasSubtitle(): boolean {\r\n\t\treturn this.subtitle !== undefined;\r\n\t}\r\n\r\n\t/* --[ SUBTITLE ]-- */\r\n\tget subtitle(): string | undefined {\r\n\t\tconst subtitle = this._subtitle?.textContent;\r\n\r\n\t\treturn subtitle === '' ? undefined : subtitle;\r\n\t}\r\n\tset subtitle(value: string | undefined) {\r\n\t\tthis.updateSubtitle(value);\r\n\t}\r\n\r\n\t/* --[ TITLE ]-- */\r\n\tget title(): string {\r\n\t\treturn this._title?.textContent;\r\n\t}\r\n\tset title(value: string) {\r\n\t\tif (this._title !== null) {\r\n\t\t\tthis._title.textContent = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate setup(): void {\r\n\t\tthis._subtitle = this.base.querySelector(selector.subtitle);\r\n\t\tthis._title = this.base.querySelector(selector.title);\r\n\r\n\t\tclassByPredicate(this.base, cssClass.hasSubtitle, this.hasSubtitle);\r\n\t}\r\n\r\n\tprivate updateSubtitle(subtitle: string | undefined): void {\r\n\t\tif (this._subtitle === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._subtitle.textContent = subtitle ?? '';\r\n\t\tclassByPredicate(this.base, cssClass.hasSubtitle, this.hasSubtitle);\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\tclearSubtitle(): void {\r\n\t\tthis.subtitle = undefined;\r\n\t}\r\n}\r\n\r\n/* == EXPORTS =============================================================== */\r\nexport { baseSelector };\r\n","import { bind } from '01-global/decorator/bind';\r\n\r\n/* == INTERFACES ============================================================ */\r\ninterface Configuration {\r\n\tonPerformPrimaryAction?: () => void;\r\n\tonPerformSecondaryAction?: () => void;\r\n}\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst moduleName = 'footer';\r\nconst baseSelector = `.js-${moduleName}`;\r\nconst selector = {\r\n\tbuttonPrimary: `${baseSelector}__primary`,\r\n\tbuttonSecondary: `${baseSelector}__secondary`\r\n};\r\n\r\n/* == CLASS ================================================================= */\r\nexport class Footer {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(readonly base: HTMLElement, private config: Configuration) {\r\n\t\tthis.setup();\r\n\t\tthis.bindEvents();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate primaryButton: HTMLButtonElement;\r\n\tprivate secondaryButton: HTMLButtonElement;\r\n\r\n\t/* -- EVENT HANDLING ---------------------------------------------------- */\r\n\tprivate bindEvents(): void {\r\n\t\tthis.primaryButton?.addEventListener('click', this.onPrimaryButtonClicked);\r\n\t\tthis.secondaryButton?.addEventListener(\r\n\t\t\t'click',\r\n\t\t\tthis.onSecondaryButtonClicked\r\n\t\t);\r\n\t}\r\n\r\n\t@bind\r\n\tprivate onPrimaryButtonClicked(event: Event): void {\r\n\t\tthis.config.onPerformPrimaryAction?.call(this);\r\n\t}\r\n\r\n\t@bind\r\n\tprivate onSecondaryButtonClicked(event: Event): void {\r\n\t\tthis.config.onPerformSecondaryAction?.call(this);\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate setup(): void {\r\n\t\tthis.primaryButton = this.base.querySelector(\r\n\t\t\tselector.buttonPrimary\r\n\t\t) as HTMLButtonElement;\r\n\t\tthis.secondaryButton = this.base.querySelector(\r\n\t\t\tselector.buttonSecondary\r\n\t\t) as HTMLButtonElement;\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\tget primaryEnabled(): boolean {\r\n\t\treturn this.primaryButton?.disabled ?? false;\r\n\t}\r\n\tset primaryEnabled(value: boolean) {\r\n\t\tif (this.primaryButton === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.primaryButton.disabled = !value;\r\n\t}\r\n\r\n\tget secondaryEnabled(): boolean {\r\n\t\treturn this.secondaryButton?.disabled ?? false;\r\n\t}\r\n\tset secondaryEnabled(value: boolean) {\r\n\t\tif (this.secondaryButton === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.secondaryButton.disabled = !value;\r\n\t}\r\n\r\n\tget secondaryTitle(): string {\r\n\t\treturn this.secondaryButton?.textContent ?? '';\r\n\t}\r\n\tset secondaryTitle(value: string) {\r\n\t\tif (this.secondaryButton === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.secondaryButton.textContent = value;\r\n\t}\r\n}\r\n\r\n/* == EXPORTS =============================================================== */\r\nexport { baseSelector };\r\n","import { ManagedViewController } from '01-global/interface';\r\nimport {\r\n\tHeader,\r\n\tbaseSelector as headerBaseSelector\r\n} from '02-components/Header';\r\nimport {\r\n\tFooter,\r\n\tbaseSelector as footerBaseSelector\r\n} from '02-components/Footer';\r\n\r\n/* == CLASS ================================================================= */\r\nexport class BaseController implements ManagedViewController {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(readonly base: HTMLElement) {\r\n\t\tthis.setupBase();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprotected header: Header;\r\n\tprotected footer: Footer;\r\n\r\n\t/* -- INSTANCE PROPERTIES ----------------------------------------------- */\r\n\tget isVisible(): boolean {\r\n\t\treturn !this.base.hidden;\r\n\t}\r\n\tset isVisible(value: boolean) {\r\n\t\tthis.base.hidden = !value;\r\n\t}\r\n\r\n\tget secondaryActionTitle(): string {\r\n\t\treturn this.footer.secondaryTitle;\r\n\t}\r\n\tset secondaryActionTitle(value: string) {\r\n\t\tthis.footer.secondaryTitle = value;\r\n\t}\r\n\r\n\t/* -- PROTECTED METHODS ------------------------------------------------- */\r\n\tprotected onSecondaryAction(): void {\r\n\t\t// noop'\r\n\t}\r\n\r\n\tprotected onPrimaryAction(): void {\r\n\t\t// noop'\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate setupBase() {\r\n\t\tconst headerBase = this.base.querySelector(headerBaseSelector) as HTMLElement;\r\n\t\tconst footerBase = this.base.querySelector(footerBaseSelector) as HTMLElement;\r\n\r\n\t\tif (headerBase !== null) {\r\n\t\t\tthis.header = new Header(headerBase);\r\n\t\t}\r\n\r\n\t\tif (footerBase !== null) {\r\n\t\t\tthis.footer = new Footer(footerBase, {\r\n\t\t\t\tonPerformPrimaryAction: () => this.onPrimaryAction(),\r\n\t\t\t\tonPerformSecondaryAction: () => this.onSecondaryAction()\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n","/* == CONSTANTS ============================================================= */\r\nconst moduleName = 'player-input';\r\nconst baseSelector = `.js-${moduleName}`;\r\nconst selector = {\r\n\tform: `${baseSelector}__form`,\r\n\tinput: 'input'\r\n};\r\n\r\n/* == CLASS ================================================================= */\r\nexport class PlayerInput {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(readonly base: HTMLElement) {\r\n\t\t//\r\n\t}\r\n\r\n\t/* -- INSTANCE PROPERTIES ----------------------------------------------- */\r\n\tget playerNames(): string[] {\r\n\t\treturn this.getPlayerNames();\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate getPlayerNames(): string[] {\r\n\t\tconst inputs = this.base.querySelectorAll(selector.input);\r\n\r\n\t\treturn (Array.from(inputs) as HTMLInputElement[])\r\n\t\t\t.map((input: HTMLInputElement) => input.value.trim())\r\n\t\t\t.filter(name => name !== '');\r\n\t}\r\n}\r\n\r\n/* == EXPORTS =============================================================== */\r\nexport { baseSelector };\r\n","/* == INTERFACES ============================================================ */\r\ninterface Configuration {\r\n\tmessageSelector?: string;\r\n\tscrollToVisible?: boolean;\r\n}\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst defaultConfig: Required<Configuration> = {\r\n\tmessageSelector: '.js-message',\r\n\tscrollToVisible: true\r\n};\r\n\r\n/* == PUBLIC METHODS ======================================================== */\r\nexport function updateMessageVisibility(\r\n\tscope: HTMLElement,\r\n\tvisibleIds: string[],\r\n\tconfig?: Configuration\r\n): void {\r\n\tconst configuration = {\r\n\t\t...defaultConfig,\r\n\t\t...config\r\n\t};\r\n\tconst messages: HTMLElement[] = Array.from(\r\n\t\tscope.querySelectorAll(configuration.messageSelector)\r\n\t);\r\n\r\n\tmessages.forEach(message => {\r\n\t\tmessage.hidden = !visibleIds.includes(message.id);\r\n\t});\r\n\r\n\tif (!configuration.scrollToVisible) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst firstMessage = messages.find(message => !message.hidden);\r\n\tfirstMessage?.scrollIntoView({\r\n\t\tbehavior: 'smooth'\r\n\t});\r\n}\r\n","import { BaseController } from '02-components/BaseViewController';\r\nimport {\r\n\tPlayerInput,\r\n\tbaseSelector as playerInputSelector\r\n} from '02-components/PlayerInput';\r\nimport { updateMessageVisibility } from '01-global/utility/error-message';\r\n\r\n/* == INTERFACES ============================================================ */\r\ninterface Selectors {\r\n\tform: string;\r\n}\r\n\r\ninterface Configuration {\r\n\tonPlayersSelected: (names: string[]) => void;\r\n\tselectors: Selectors;\r\n\twarningId: string;\r\n}\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst minimumRequiredPlayers = 2;\r\n\r\n/* == CLASS ================================================================= */\r\nexport class GameStartController extends BaseController {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(readonly base: HTMLElement, readonly config?: Configuration) {\r\n\t\tsuper(base);\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate playerInput: PlayerInput;\r\n\r\n\t/* -- PROTECTED METHODS ------------------------------------------------- */\r\n\tprotected onPrimaryAction(): void {\r\n\t\tconst playerNames = this.playerInput?.playerNames ?? [];\r\n\t\tconst isValid = playerNames.length >= minimumRequiredPlayers;\r\n\r\n\t\tthis.updateWarningVisibility(isValid);\r\n\r\n\t\tif (isValid) {\r\n\t\t\tthis.config.onPlayersSelected?.call(this, playerNames);\r\n\t\t}\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate setup(): void {\r\n\t\tconst playerInputBase = this.base.querySelector(\r\n\t\t\tplayerInputSelector\r\n\t\t) as HTMLElement;\r\n\t\tif (playerInputBase) {\r\n\t\t\tthis.playerInput = new PlayerInput(playerInputBase);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate updateWarningVisibility(hide: boolean): void {\r\n\t\tconst visibleIds = hide ? [] : [this.config.warningId];\r\n\r\n\t\tupdateMessageVisibility(this.base, visibleIds);\r\n\t}\r\n}\r\n","import { PlayerSummary } from '01-global/interface';\r\nimport { rankPlayers } from '01-global/utility/scoring';\r\n\r\n/* == INTERFACES ============================================================ */\r\ninterface Configuration {\r\n\tincludeTiles: boolean;\r\n}\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst medals = ['🥇', '🥈', '🥉'];\r\n\r\n/* == PRIVATE METHODS ======================================================= */\r\nfunction createBody(\r\n\tplayers: PlayerSummary[],\r\n\tincludeTiles: Configuration['includeTiles']\r\n): string {\r\n\tconst ranking = rankPlayers(players);\r\n\tconst rows = players\r\n\t\t.map(player => {\r\n\t\t\tconst place = ranking.findIndex(id => id === player.id);\r\n\t\t\tconst medal = medals[place] ?? place + 1;\r\n\r\n\t\t\treturn `<tr>\r\n\t\t\t<td>${medal}</td>\r\n\t\t\t<td>${player.name}</td>\r\n\t\t\t<td>${player.score}</td>\r\n\t\t\t${includeTiles ? `<td>${player.tileCount}</td>` : ''}\r\n\t\t</tr>`;\r\n\t\t})\r\n\t\t.join('');\r\n\r\n\treturn `<tbody>\r\n\t\t${rows}\r\n\t</tbody>`;\r\n}\r\n\r\nfunction createHeader(includeTiles: Configuration['includeTiles']): string {\r\n\treturn `<thead>\r\n\t\t<tr>\r\n\t\t\t<th></th>\r\n\t\t\t<th>Player</th>\r\n\t\t\t<th>Score</th>\r\n\t\t\t${includeTiles ? '<th>Tiles</th>' : ''}\r\n\t\t</tr>\r\n\t</thead>`;\r\n}\r\n\r\n/* == PUBLIC METHODS ======================================================== */\r\nexport function createLeaderboard(\r\n\tplayers: PlayerSummary[],\r\n\tconfig: Configuration\r\n): string {\r\n\treturn `<table class=\"c-leaderboard\">\r\n\t\t${createHeader(config.includeTiles)}\r\n\t\t${createBody(players, config.includeTiles)}\r\n\t</table>`;\r\n}\r\n","import { PlayerSummary } from '01-global/interface';\r\nimport { createLeaderboard } from '02-components/leaderboard';\r\nimport { BaseController } from '02-components/BaseViewController';\r\n\r\n/* == INTERFACES ============================================================ */\r\ninterface Configuration {\r\n\tonStartNewGame: () => void;\r\n\tselectors: Selectors;\r\n}\r\n\r\ninterface Selectors {\r\n\tboard: string;\r\n}\r\n\r\n/* == CLASS ================================================================= */\r\nexport class LeaderboardController extends BaseController {\r\n\tconstructor(readonly base: HTMLElement, private config: Configuration) {\r\n\t\tsuper(base);\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate board: HTMLElement;\r\n\r\n\t/* -- PROTECTED METHODS ------------------------------------------------- */\r\n\tprotected onPrimaryAction(): void {\r\n\t\tthis.config.onStartNewGame?.();\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate setup(): void {\r\n\t\tthis.board = this.base.querySelector(\r\n\t\t\tthis.config.selectors.board\r\n\t\t) as HTMLElement;\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\tshowLeaderboard(players: PlayerSummary[]): void {\r\n\t\tif (this.board === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.board.innerHTML = createLeaderboard(players, {\r\n\t\t\tincludeTiles: false\r\n\t\t});\r\n\t}\r\n}\r\n","import { bind } from '01-global/decorator/bind';\r\n\r\n/* == INTERFACES ============================================================ */\r\ninterface Configuration {\r\n\tbackground?: HTMLElement;\r\n\tonHidden?: () => void;\r\n\tonShown?: () => void;\r\n}\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst cssClass = {\r\n\tisVisible: 'is-visible'\r\n};\r\n\r\n/* == CLASS ================================================================= */\r\nexport class FlyIn {\r\n\tconstructor(readonly base: HTMLElement, private config?: Configuration) {\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate isVisible = false;\r\n\r\n\t/* -- INSTANCE PROPERTIES ----------------------------------------------- */\r\n\tprivate get background(): HTMLElement | undefined {\r\n\t\treturn this.config?.background;\r\n\t}\r\n\r\n\t/* -- EVENT HANDLING ---------------------------------------------------- */\r\n\t@bind\r\n\tprivate onTransitionEnd(event: TransitionEvent): void {\r\n\t\tif (this.isVisible) {\r\n\t\t\tthis.config?.onShown?.();\r\n\t\t} else {\r\n\t\t\tthis.base.hidden = true;\r\n\t\t\tthis.config?.onHidden?.();\r\n\t\t}\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate setup(): void {\r\n\t\tthis.base.addEventListener('transitionend', this.onTransitionEnd);\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\thide(): void {\r\n\t\tthis.isVisible = false;\r\n\r\n\t\tthis.background?.classList.remove(cssClass.isVisible);\r\n\t\tthis.base.classList.remove(cssClass.isVisible);\r\n\t}\r\n\r\n\tshow(): void {\r\n\t\tthis.isVisible = true;\r\n\t\tthis.base.hidden = false;\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.background?.classList.add(cssClass.isVisible);\r\n\t\t\tthis.base.classList.add(cssClass.isVisible);\r\n\t\t}, 0);\r\n\t}\r\n}\r\n","import { PlayerSummary } from '01-global/interface';\r\nimport { createLeaderboard } from '02-components/leaderboard';\r\nimport { FlyIn } from '02-components/FlyIn';\r\n\r\n/* == INTERFACES ============================================================ */\r\ninterface Configuration {\r\n\tonStartNewGame?: () => void;\r\n\tselectors: Selectors;\r\n}\r\n\r\ninterface Selectors {\r\n\tbackground: string;\r\n\tboard: string;\r\n\tcloseTrigger: string;\r\n}\r\n\r\n/* == CLASS ================================================================= */\r\nexport class LeaderboardFlyInController {\r\n\tconstructor(readonly base: HTMLElement, private config: Configuration) {\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate board: HTMLElement | undefined;\r\n\tprivate flyOutController: FlyIn | undefined;\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate setup(): void {\r\n\t\tthis.board = this.base.querySelector(\r\n\t\t\tthis.config.selectors.board\r\n\t\t) as HTMLElement;\r\n\t\tconst closeTrigger = this.base.querySelector(\r\n\t\t\tthis.config.selectors.closeTrigger\r\n\t\t);\r\n\t\tconst background = document.querySelector(\r\n\t\t\tthis.config.selectors.background\r\n\t\t) as HTMLElement | null;\r\n\r\n\t\tif (closeTrigger !== null) {\r\n\t\t\tcloseTrigger.addEventListener('click', () => {\r\n\t\t\t\tthis.flyOutController?.hide();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.flyOutController = new FlyIn(this.base, {\r\n\t\t\tbackground: background ?? undefined\r\n\t\t});\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\tshowLeaderboard(players: PlayerSummary[], includeTiles = false): void {\r\n\t\tif (this.board === undefined) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.board.innerHTML = createLeaderboard(players, {\r\n\t\t\tincludeTiles\r\n\t\t});\r\n\r\n\t\tthis.flyOutController?.show();\r\n\t}\r\n}\r\n","import { PlayerSummary } from '01-global/interface';\r\nimport { updateMessageVisibility } from '01-global/utility/error-message';\r\nimport { BaseController } from '02-components/BaseViewController';\r\n\r\n/* == INTERFACES ============================================================ */\r\ninterface Configuration {\r\n\tisVisible: boolean;\r\n\tonCancel: () => void;\r\n\tonPlayerSelected: (player: PlayerSummary) => void;\r\n\tselectors: Selectors;\r\n\twarningId: string;\r\n}\r\n\r\ninterface Player {\r\n\tid: string;\r\n\tsummary: PlayerSummary;\r\n}\r\n\r\ninterface Selectors {\r\n\tnameList: string;\r\n}\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst selector = {\r\n\tselectedPlayer: 'input[type=\"radio\"]:checked'\r\n};\r\n\r\n/* == CLASS ================================================================= */\r\nexport class PlayerSelectController extends BaseController {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(readonly base: HTMLElement, private config: Configuration) {\r\n\t\tsuper(base);\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate players: Player[];\r\n\tprivate _round: number;\r\n\r\n\t/* -- INSTANCE PROPERTIES ----------------------------------------------- */\r\n\tget round(): number {\r\n\t\treturn this._round;\r\n\t}\r\n\tset round(value: number) {\r\n\t\tif (value === this._round || !Number.isFinite(value)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._round = value;\r\n\t\tthis.updateHeader();\r\n\t}\r\n\r\n\t/* -- EVENT HANDLING ---------------------------------------------------- */\r\n\tprotected onSecondaryAction(): void {\r\n\t\tthis.config.onCancel?.call(this);\r\n\t}\r\n\r\n\tprotected onPrimaryAction(): void {\r\n\t\tconst selectedPlayer = this.getSelectedPlayer();\r\n\t\tconst isValid = selectedPlayer !== null;\r\n\r\n\t\tthis.updateWarningVisibility(isValid);\r\n\r\n\t\tif (isValid) {\r\n\t\t\tthis.config.onPlayerSelected?.call(this, selectedPlayer);\r\n\t\t}\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate getSelectedPlayer(): PlayerSummary | null {\r\n\t\tconst selectedInput = this.base.querySelector(selector.selectedPlayer);\r\n\r\n\t\treturn selectedInput === null\r\n\t\t\t? null\r\n\t\t\t: this.players.find(player => player.id === selectedInput.id)?.summary ??\r\n\t\t\t\t\tnull;\r\n\t}\r\n\r\n\tprivate renderPlayer(player: Player): string {\r\n\t\treturn `<li class=\"c-radio-button\">\r\n\t\t\t<input class=\"c-radio-button__input\" type=\"radio\" name=\"player-select\" id=\"${player.id}\">\r\n\t\t\t<label for=\"${player.id}\" class=\"c-radio-button__button\">\r\n\t\t\t\t${player.summary.name}\r\n\t\t\t</label>\r\n\t\t</li>`;\r\n\t}\r\n\r\n\tprivate renderPlayersList(): void {\r\n\t\tconst listElement = this.base.querySelector(this.config.selectors.nameList);\r\n\t\tif (listElement === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlistElement.innerHTML = this.players\r\n\t\t\t.map(player => this.renderPlayer(player))\r\n\t\t\t.join('');\r\n\t}\r\n\r\n\tprivate setup(): void {\r\n\t\tthis.isVisible = this.config.isVisible;\r\n\t}\r\n\r\n\tprivate updateHeader(): void {\r\n\t\tthis.header.title = `Start Round ${this.round}`.trim();\r\n\t}\r\n\r\n\tprivate updateWarningVisibility(hide: boolean): void {\r\n\t\tconst visibleIds = hide ? [] : [this.config.warningId];\r\n\r\n\t\tupdateMessageVisibility(this.base, visibleIds);\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\tsetPlayers(players: PlayerSummary[]): void {\r\n\t\tthis.players = players.map((player, index) => ({\r\n\t\t\tid: `player_${index}`,\r\n\t\t\tsummary: player\r\n\t\t}));\r\n\r\n\t\tthis.renderPlayersList();\r\n\t}\r\n}\r\n","import { bind } from '01-global/decorator/bind';\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst moduleName = 'number-pad';\r\nconst baseSelector = `.js-${moduleName}`;\r\nconst defaultValue = '';\r\n\r\nconst action = {\r\n\tbackspace: 'backspace',\r\n\tclear: 'clear'\r\n};\r\n\r\nconst attributeName = {\r\n\taction: 'data-action',\r\n\tvalue: 'data-value'\r\n};\r\n\r\nconst selector = {\r\n\tbutton: `[${attributeName.action}], [${attributeName.value}]`\r\n};\r\n\r\n/* == CLASS ================================================================= */\r\nexport class NumberPad {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(\r\n\t\treadonly base: HTMLElement,\r\n\t\tprivate callback?: (value: number | undefined) => void\r\n\t) {\r\n\t\tthis.bindEvents();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate _value: string = defaultValue;\r\n\r\n\t/* -- INSTANCE PROPERTIES ----------------------------------------------- */\r\n\tget value(): number | undefined {\r\n\t\treturn this._value === '' ? undefined : parseInt(this._value, 10);\r\n\t}\r\n\tset value(value: number | undefined) {\r\n\t\t// @ts-ignore value can't be undefined as we check if it is finite.\r\n\t\tthis._value = Number.isFinite(value) ? value.toString() : '';\r\n\t}\r\n\r\n\t/* -- EVENT HANDLING ---------------------------------------------------- */\r\n\tprivate bindEvents(): void {\r\n\t\tthis.base.addEventListener('click', this.onClick);\r\n\t}\r\n\r\n\t@bind\r\n\tprivate onClick(event: Event): void {\r\n\t\tconst button = (event.target as HTMLElement).closest(selector.button);\r\n\t\tif (button === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst hasChanged = button.hasAttribute(attributeName.action)\r\n\t\t\t? this.processAction(button.getAttribute(attributeName.action))\r\n\t\t\t: this.processValue(button.getAttribute(attributeName.value));\r\n\r\n\t\tif (hasChanged && this.callback) {\r\n\t\t\tthis.callback(this.value);\r\n\t\t}\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate processAction(selectedAction: string): boolean {\r\n\t\tif (this._value === '') {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tswitch (selectedAction) {\r\n\t\t\tcase action.backspace:\r\n\t\t\t\tthis._value = this._value.slice(0, -1);\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\tcase action.clear:\r\n\t\t\t\tthis.reset();\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate processValue(value: string): boolean {\r\n\t\tthis._value += value;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\treset(): void {\r\n\t\tthis._value = defaultValue;\r\n\t}\r\n}\r\n\r\n/* == EXPORTS =============================================================== */\r\nexport { baseSelector };\r\n","import { bind } from '01-global/decorator/bind';\r\nimport { NumberPad } from '02-components/NumberPad';\r\n\r\n/* == INTERFACES ============================================================ */\r\ninterface Configuration {\r\n\tdefaultPoints?: number;\r\n\tonPointsChanged?: (value: number | undefined) => void;\r\n\tselectors: Selectors;\r\n}\r\n\r\ninterface Selectors {\r\n\tdisplay: string;\r\n\tnumberPad: string;\r\n}\r\n\r\n/* == CLASS ================================================================= */\r\nexport class NumberEntry {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(readonly base: HTMLElement, private configuration: Configuration) {\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- PRIVATE FIELDS ---------------------------------------------------- */\r\n\tprivate display: HTMLElement | undefined;\r\n\tprivate numberPad: NumberPad | undefined;\r\n\r\n\t/* -- INSTANCE PROPERTIES ----------------------------------------------- */\r\n\tget value(): number | undefined {\r\n\t\treturn this.numberPad?.value;\r\n\t}\r\n\tset value(value: number | undefined) {\r\n\t\tif (this.numberPad === undefined) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.numberPad.value = value;\r\n\t\tthis.showPoints(value);\r\n\t}\r\n\r\n\t/* -- EVENT HANDLING ---------------------------------------------------- */\r\n\t@bind\r\n\tprivate onPointsChanged(value: number | undefined): void {\r\n\t\tthis.showPoints(value);\r\n\t\tthis.configuration.onPointsChanged?.(value);\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate setup(): void {\r\n\t\tthis.display = this.base.querySelector(\r\n\t\t\tthis.configuration.selectors.display\r\n\t\t) as HTMLElement;\r\n\r\n\t\tconst numberPadBase = this.base.querySelector(\r\n\t\t\tthis.configuration.selectors.numberPad\r\n\t\t) as HTMLElement;\r\n\t\tif (numberPadBase !== null) {\r\n\t\t\tthis.numberPad = new NumberPad(numberPadBase, this.onPointsChanged);\r\n\t\t}\r\n\r\n\t\tthis.value = this.configuration.defaultPoints;\r\n\t}\r\n\r\n\tprivate showPoints(points: number | undefined): void {\r\n\t\tif (!this.display) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.display.textContent = points?.toString() ?? '--';\r\n\t}\r\n\r\n\t/* -- PULBIC METHODS ---------------------------------------------------- */\r\n\treset(): void {\r\n\t\tthis.value = this.configuration.defaultPoints;\r\n\t}\r\n}\r\n","import { PlayerSummary, RemainingPoints } from '01-global/interface';\r\nimport { bind } from '01-global/decorator/bind';\r\nimport { updateMessageVisibility } from '01-global/utility/error-message';\r\nimport { FlyIn } from '02-components/FlyIn';\r\nimport { BaseController } from '02-components/BaseViewController';\r\nimport { NumberEntry } from '02-components/NumberEntry';\r\nimport { createPlayerButton } from '02-components/player-points-button';\r\n\r\n/* == INTERFACES ============================================================ */\r\ninterface Configuration {\r\n\tflyInBackground?: HTMLElement;\r\n\tisVisible: boolean;\r\n\tonPointsCollected: (points: RemainingPoints[]) => void;\r\n\tselectors: Selectors;\r\n\twarningId: string;\r\n}\r\n\r\ninterface Player {\r\n\tid: string;\r\n\tpoints?: number;\r\n\tsummary: PlayerSummary;\r\n}\r\n\r\ninterface Selectors {\r\n\tcancelSetPoints: string;\r\n\tflyInPortal: string;\r\n\tflyInTitle: string;\r\n\tflyOut: string;\r\n\tnumberEntry: string;\r\n\tplayerList: string;\r\n\tsetPoints: string;\r\n}\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst attribute = {\r\n\tid: 'data-id'\r\n};\r\n\r\n/* == CLASS ================================================================= */\r\nexport class PointCollectionController extends BaseController {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(readonly base: HTMLElement, private config: Configuration) {\r\n\t\tsuper(base);\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate flyIn?: FlyIn;\r\n\tprivate flyInTitle: HTMLElement | null = null;\r\n\tprivate numberEntry: NumberEntry | null = null;\r\n\tprivate players?: Player[];\r\n\tprivate selectedPlayer: Player | undefined;\r\n\r\n\t/* -- EVENT HANDLING ---------------------------------------------------- */\r\n\t@bind\r\n\tprivate onCancelSetPoints(event: Event): void {\r\n\t\tthis.flyIn?.hide();\r\n\t}\r\n\r\n\t@bind\r\n\tprivate onClicked(event: MouseEvent): void {\r\n\t\tconst playerId = (event.target as HTMLElement)\r\n\t\t\t.closest(`[${attribute.id}]:not(:disabled)`)\r\n\t\t\t?.getAttribute(attribute.id);\r\n\r\n\t\tif (playerId === undefined) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.selectedPlayer = this.players?.find(player => player.id === playerId);\r\n\t\tif (this.selectedPlayer === undefined) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.prepareFlyInView();\r\n\t\tthis.showFlyIn();\r\n\t}\r\n\r\n\t@bind\r\n\tprivate onFlyInHidden(): void {\r\n\t\tif (this.flyIn) {\r\n\t\t\tthis.base.appendChild(this.flyIn.base);\r\n\t\t}\r\n\t}\r\n\r\n\t@bind\r\n\tprivate onSetPoints(): void {\r\n\t\tif (this.numberEntry?.value !== 0 && this.selectedPlayer) {\r\n\t\t\tthis.selectedPlayer.points = this.numberEntry?.value;\r\n\t\t}\r\n\t\tthis.renderPlayersList();\r\n\t\tthis.flyIn?.hide();\r\n\t}\r\n\r\n\tprotected onPrimaryAction(): void {\r\n\t\tconst invalidPlayers = this.getPlayersWithoutPoints();\r\n\t\tconst isValid = invalidPlayers.length === 0;\r\n\r\n\t\tthis.updateWarningVisibility(isValid);\r\n\r\n\t\tif (!isValid) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst result =\r\n\t\t\tthis.players?.map(({ points, summary: { id } }) => ({\r\n\t\t\t\tid,\r\n\t\t\t\tpoints: points ?? 0\r\n\t\t\t})) ?? [];\r\n\t\tthis.config.onPointsCollected?.(result);\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate getPlayersWithoutPoints(): Player[] {\r\n\t\treturn this.players === undefined\r\n\t\t\t? []\r\n\t\t\t: this.players.filter(({ points, summary: { hasEmptyHand } }) => {\r\n\t\t\t\t\treturn (points ?? 0) === 0 && !hasEmptyHand;\r\n\t\t\t  });\r\n\t}\r\n\r\n\tprivate renderPlayer(player: Player): string {\r\n\t\tconst { id, points, summary } = player;\r\n\r\n\t\treturn `<li>\r\n\t\t\t${createPlayerButton(id, summary, points)}\r\n\t\t</li>`;\r\n\t}\r\n\r\n\tprivate renderPlayersList(): void {\r\n\t\tconst listElement = this.base.querySelector(this.config.selectors.playerList);\r\n\t\tif (listElement === null || this.players === undefined) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlistElement.innerHTML = this.players\r\n\t\t\t?.map(player => this.renderPlayer(player))\r\n\t\t\t.join('');\r\n\t}\r\n\r\n\tprivate setup(): void {\r\n\t\tthis.setupFlyIn();\r\n\r\n\t\tconst numberEntryBase = this.base.querySelector(\r\n\t\t\tthis.config.selectors.numberEntry\r\n\t\t) as HTMLElement;\r\n\t\tthis.numberEntry =\r\n\t\t\tnumberEntryBase === null\r\n\t\t\t\t? null\r\n\t\t\t\t: new NumberEntry(numberEntryBase, {\r\n\t\t\t\t\t\tdefaultPoints: 0,\r\n\t\t\t\t\t\tselectors: {\r\n\t\t\t\t\t\t\tdisplay: '.js-number-entry__display',\r\n\t\t\t\t\t\t\tnumberPad: '.js-number-entry__number-pad'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t  });\r\n\r\n\t\tthis.base.addEventListener('click', this.onClicked);\r\n\t\tthis.isVisible = this.config.isVisible;\r\n\t}\r\n\r\n\tprivate prepareFlyInView(): void {\r\n\t\tif (this.numberEntry) {\r\n\t\t\tthis.numberEntry.value = this.selectedPlayer?.points ?? 0;\r\n\t\t}\r\n\t\tif (this.flyInTitle) {\r\n\t\t\tthis.flyInTitle.textContent = this.selectedPlayer?.summary.name ?? '';\r\n\t\t}\r\n\t}\r\n\r\n\tprivate setupFlyIn(): void {\r\n\t\tconst flyInBase = this.base.querySelector(\r\n\t\t\tthis.config.selectors.flyOut\r\n\t\t) as HTMLElement;\r\n\t\tif (flyInBase === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.flyIn = new FlyIn(flyInBase, {\r\n\t\t\tbackground: this.config.flyInBackground,\r\n\t\t\tonHidden: this.onFlyInHidden\r\n\t\t});\r\n\r\n\t\tthis.flyInTitle = this.base.querySelector(this.config.selectors.flyInTitle);\r\n\r\n\t\tthis.base\r\n\t\t\t.querySelector(this.config.selectors.setPoints)\r\n\t\t\t?.addEventListener('click', this.onSetPoints);\r\n\t\tthis.base\r\n\t\t\t.querySelector(this.config.selectors.cancelSetPoints)\r\n\t\t\t?.addEventListener('click', this.onCancelSetPoints);\r\n\t}\r\n\r\n\tprivate showFlyIn(): void {\r\n\t\tif (this.flyIn === undefined) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// The fly-in needs to be moved to the portal to make sure the UI looks\r\n\t\t// like it is intended.\r\n\t\tdocument\r\n\t\t\t.querySelector(this.config.selectors.flyInPortal)\r\n\t\t\t?.appendChild(this.flyIn.base);\r\n\t\tthis.flyIn.show();\r\n\t}\r\n\r\n\tprivate updateWarningVisibility(hide: boolean): void {\r\n\t\tconst visibleIds = hide ? [] : [this.config.warningId];\r\n\r\n\t\tupdateMessageVisibility(this.base, visibleIds);\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\tsetPlayers(players: PlayerSummary[]): void {\r\n\t\tthis.players = players.map((player, index) => ({\r\n\t\t\tid: `player_${index}`,\r\n\t\t\tpoints: player.hasEmptyHand ? 0 : undefined,\r\n\t\t\tsummary: player\r\n\t\t}));\r\n\r\n\t\tthis.renderPlayersList();\r\n\t}\r\n}\r\n","import { PlayerSummary } from '01-global/interface';\r\n\r\n/* == PRIVATE METHODS ======================================================= */\r\nfunction getDisabledAttribute(hasEmptyHand: boolean): string {\r\n\treturn hasEmptyHand ? 'disabled' : '';\r\n}\r\n\r\nfunction getRoundWinnerDescription(hasEmptyHand: boolean): string {\r\n\treturn hasEmptyHand ? '<span>Round winner</span>' : '';\r\n}\r\n\r\nfunction getSetPoints(points?: number): string {\r\n\treturn (points ?? 0) === 0\r\n\t\t? ''\r\n\t\t: `<p class=\"c-score-button__score\">${points}</p>`;\r\n}\r\n\r\nfunction getSetPointsPrompt(points?: number): string {\r\n\treturn points === undefined ? '<span>No points set</span>' : '';\r\n}\r\n\r\n/* == PUBLIC METHODS ======================================================== */\r\nexport function createPlayerButton(\r\n\tid: string,\r\n\tplayer: PlayerSummary,\r\n\tpoints?: number\r\n): string {\r\n\tconst { hasEmptyHand, name } = player;\r\n\r\n\treturn `\r\n\t\t<button\r\n\t\t\ttype=\"button\"\r\n\t\t\tclass=\"o-structure o-structure--vertical-center c-score-button\"\r\n\t\t\tdata-id=\"${id}\"\r\n\t\t\t${getDisabledAttribute(hasEmptyHand)}\r\n\t\t>\r\n\t\t\t<p class=\"o-structure o-structure--vertical o-structure--grow\">\r\n\t\t\t\t<span class=\"c-score-button__name\">${name}</span>\r\n\t\t\t\t${getRoundWinnerDescription(hasEmptyHand)}\r\n\t\t\t\t${getSetPointsPrompt(points)}\r\n\t\t\t</p>\r\n\t\t\t${getSetPoints(points)}\r\n\t\t</button>`;\r\n}\r\n","import { updateMessageVisibility } from '01-global/utility/error-message';\r\nimport { BaseController } from '02-components/BaseViewController';\r\nimport { NumberEntry } from '02-components/NumberEntry';\r\n\r\n/* == INTERFACES ============================================================ */\r\ninterface Configuration {\r\n\tdefaultPoints: number;\r\n\tisVisible: boolean;\r\n\tonCancel: () => void;\r\n\tonLimitSet: (points: number) => void;\r\n\tpointsValidation: PointsValidation;\r\n\tselectors: Selectors;\r\n}\r\n\r\ninterface PointsValidation {\r\n\tmaximum: number;\r\n\tminimum: number;\r\n\twarningId: string;\r\n}\r\n\r\ninterface Selectors {\r\n\tnumberEntry: string;\r\n}\r\n\r\n/* == CLASS ================================================================= */\r\nexport class PointLimitController extends BaseController {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(readonly base: HTMLElement, private config: Configuration) {\r\n\t\tsuper(base);\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------- */\r\n\tprivate numberEntry?: NumberEntry;\r\n\r\n\t/* -- EVENT HANDLING ---------------------------------------------------- */\r\n\tprotected onSecondaryAction(): void {\r\n\t\tthis.config.onCancel?.call(this);\r\n\t}\r\n\r\n\tprotected onPrimaryAction(): void {\r\n\t\tconst { pointsValidation } = this.config;\r\n\t\tconst setLimit = this.numberEntry?.value ?? 0;\r\n\t\tconst isValid: boolean =\r\n\t\t\tsetLimit >= pointsValidation.minimum && setLimit <= pointsValidation.maximum;\r\n\r\n\t\tthis.updateWarningVisibility(isValid);\r\n\r\n\t\tif (isValid) {\r\n\t\t\tthis.config.onLimitSet?.call(this, setLimit);\r\n\t\t}\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate setup(): void {\r\n\t\tthis.isVisible = this.config.isVisible;\r\n\r\n\t\tconst numberEntryBase = this.base.querySelector(\r\n\t\t\tthis.config.selectors.numberEntry\r\n\t\t) as HTMLElement;\r\n\t\tif (numberEntryBase !== null) {\r\n\t\t\tthis.numberEntry = new NumberEntry(numberEntryBase, {\r\n\t\t\t\tdefaultPoints: this.config.defaultPoints,\r\n\t\t\t\tselectors: {\r\n\t\t\t\t\tdisplay: '.js-number-entry__display',\r\n\t\t\t\t\tnumberPad: '.js-number-entry__number-pad'\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tprivate updateWarningVisibility(hide: boolean): void {\r\n\t\tconst visibleIds = hide ? [] : [this.config.pointsValidation.warningId];\r\n\r\n\t\tupdateMessageVisibility(this.base, visibleIds);\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\treset(): void {\r\n\t\tthis.numberEntry?.reset();\r\n\t}\r\n}\r\n","import { bind } from '01-global/decorator/bind';\r\n\r\n/* == INTERFACES ============================================================ */\r\ntype BeforeShow = (content: HTMLElement) => void;\r\n\r\ninterface Placeholder {\r\n\t[name: string]: string;\r\n}\r\n\r\ninterface ShowOptions {\r\n\tonBeforeShow?: BeforeShow;\r\n\tonClose?: () => void;\r\n\tplaceholders?: Placeholder;\r\n}\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst moduleName = 'dialog';\r\nconst baseSelector = `.js-${moduleName}`;\r\n\r\nconst cssClass = {\r\n\tisVisible: 'is-visible'\r\n};\r\n\r\nconst selector = {\r\n\tcloseTrigger: `${baseSelector}__close`,\r\n\tcontainer: `${baseSelector}__container`,\r\n\tportal: '#dialog-portal'\r\n};\r\n\r\nexport const dialogCloseTriggerSelector = selector.closeTrigger;\r\n\r\n/* == CLASS ================================================================= */\r\nexport class Dialog {\r\n\tconstructor() {\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate container: HTMLElement | null = null;\r\n\tprivate closeCallback?: () => void;\r\n\tprivate portal: HTMLElement | null = null;\r\n\r\n\t/* -- INSTANCE PROPERTIES ----------------------------------------------- */\r\n\tget dialogContent(): HTMLElement | null {\r\n\t\treturn this.container;\r\n\t}\r\n\r\n\t/* -- EVENT HANDLING ---------------------------------------------------- */\r\n\t@bind\r\n\tprivate onClose(): void {\r\n\t\tthis.hideDialog();\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate bindCloseEvent(): void {\r\n\t\tconst closeTrigger = this.container?.querySelector(selector.closeTrigger);\r\n\t\tcloseTrigger?.addEventListener('click', this.onClose);\r\n\t}\r\n\r\n\tprivate fillPlaceholders(\r\n\t\tcontent: HTMLElement,\r\n\t\tplaceholders: Placeholder\r\n\t): void {\r\n\t\tObject.keys(placeholders).forEach(id => {\r\n\t\t\tconst element = content.querySelector(`[data-placeholder=\"${id}\"]`);\r\n\t\t\tif (element !== null) {\r\n\t\t\t\telement.textContent = placeholders[id];\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprivate getDialogContent(id: string): HTMLElement | null {\r\n\t\tconst template = document.getElementById(\r\n\t\t\t`dialog-${id}`\r\n\t\t) as HTMLTemplateElement;\r\n\r\n\t\treturn (\r\n\t\t\t(template?.content?.firstElementChild?.cloneNode(true) as HTMLElement) ??\r\n\t\t\tnull\r\n\t\t);\r\n\t}\r\n\r\n\tprivate setup() {\r\n\t\tthis.portal = document.querySelector(selector.portal);\r\n\t\tthis.container = this.portal?.querySelector(selector.container) ?? null;\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\thideDialog(): void {\r\n\t\tthis.portal?.classList.remove(cssClass.isVisible);\r\n\t\tthis.container?.removeChild(this.container.firstElementChild);\r\n\t\tthis.closeCallback?.();\r\n\t\tthis.closeCallback = undefined;\r\n\t}\r\n\r\n\tshowDialog(id: string, options: ShowOptions): void {\r\n\t\tthis.closeCallback = options.onClose;\r\n\r\n\t\tconst content = this.getDialogContent(id);\r\n\t\tif (options.placeholders) {\r\n\t\t\tthis.fillPlaceholders(content, options.placeholders);\r\n\t\t}\r\n\r\n\t\tthis.container?.appendChild(content);\r\n\t\tthis.bindCloseEvent();\r\n\t\toptions.onBeforeShow?.(this.container);\r\n\r\n\t\tthis.portal?.classList.add(cssClass.isVisible);\r\n\t}\r\n}\r\n","import { bind } from '01-global/decorator/bind';\r\n\r\n/* == TYPES ================================================================= */\r\ntype OnTimeOut = () => void;\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst cssClass = {\r\n\tactive: 'is-active'\r\n};\r\n\r\n/* == CLASS ================================================================= */\r\nexport class TimedButton {\r\n\tconstructor(readonly base: HTMLElement, private callback: OnTimeOut) {\r\n\t\tthis.bindEvents();\r\n\t}\r\n\r\n\t/* -- EVENT HANDLING ---------------------------------------------------- */\r\n\tprivate bindEvents(): void {\r\n\t\tthis.base.addEventListener('transitionend', this.onTimeOut);\r\n\t}\r\n\r\n\t@bind\r\n\tprivate onTimeOut(event: TransitionEvent): void {\r\n\t\tif (event.propertyName === 'transform') {\r\n\t\t\tthis.callback?.();\r\n\t\t}\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\tstop(): void {\r\n\t\tthis.base.classList.remove(cssClass.active);\r\n\t}\r\n\r\n\tstart(): void {\r\n\t\tthis.base.classList.add(cssClass.active);\r\n\t}\r\n}\r\n","import { PlayerSummary } from '01-global/interface';\r\nimport { Dialog, dialogCloseTriggerSelector } from '02-components/Dialog';\r\nimport { TimedButton } from '02-components/TimedButton';\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst dialog = new Dialog();\r\nconst dialogId = {\r\n\tgameWinner: 'game-winner',\r\n\tlastRound: 'last-round',\r\n\troundWinner: 'round-winner',\r\n\tturnPlayed: 'turn-played'\r\n};\r\n\r\n/* == PUBLIC METHODS ======================================================== */\r\nexport function showGameWinnerDialog(\r\n\twinner: PlayerSummary,\r\n\tonClose?: () => void\r\n): void {\r\n\tdialog.showDialog(dialogId.gameWinner, {\r\n\t\tonClose,\r\n\t\tplaceholders: {\r\n\t\t\tname: winner.name,\r\n\t\t\tscore: winner.score.toString(10)\r\n\t\t}\r\n\t});\r\n}\r\n\r\nexport function showLastRoundDialog(\r\n\tcurrentPlayerName: string,\r\n\tlimit: number,\r\n\tonClose?: () => void\r\n): void {\r\n\tdialog.showDialog(dialogId.lastRound, {\r\n\t\tonClose,\r\n\t\tplaceholders: {\r\n\t\t\tname: currentPlayerName,\r\n\t\t\tlimit: limit.toString(10)\r\n\t\t}\r\n\t});\r\n}\r\n\r\nexport function showRoundWinnerDialog(\r\n\tpoints: number,\r\n\tname: string,\r\n\tonClose?: () => void\r\n): void {\r\n\tdialog.showDialog(dialogId.roundWinner, {\r\n\t\tonClose,\r\n\t\tplaceholders: {\r\n\t\t\tname,\r\n\t\t\tpoints: points.toString(10)\r\n\t\t}\r\n\t});\r\n}\r\n\r\nexport function showTurnPlayedDialog(\r\n\tactivePlayer: PlayerSummary,\r\n\tdelta: number,\r\n\tonClose?: () => void\r\n): void {\r\n\tconst formattedDelta = `${delta > 0 ? '+' : ''}${delta}`;\r\n\tconst onBeforeShow = (content: HTMLElement) => {\r\n\t\tconst button = content.querySelector(\r\n\t\t\tdialogCloseTriggerSelector\r\n\t\t) as HTMLElement;\r\n\t\tif (button === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst timedButton = new TimedButton(button, () => dialog.hideDialog());\r\n\t\tsetTimeout(() => timedButton.start(), 0);\r\n\t};\r\n\r\n\tdialog.showDialog(dialogId.turnPlayed, {\r\n\t\tonBeforeShow,\r\n\t\tonClose,\r\n\t\tplaceholders: {\r\n\t\t\tdelta: formattedDelta,\r\n\t\t\tname: activePlayer.name,\r\n\t\t\tscore: activePlayer.score.toString(10)\r\n\t\t}\r\n\t});\r\n}\r\n","import { bind } from '01-global/decorator/bind';\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst moduleName = 'checkbox-group';\r\nconst baseSelector = `.js-${moduleName}`;\r\nconst selector = {\r\n\tselectedInput: 'input:checked'\r\n};\r\n\r\n/* == CLASS ================================================================= */\r\nexport class CheckboxGroup {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(\r\n\t\treadonly base: HTMLElement,\r\n\t\tprivate callback?: (value: string | undefined) => void\r\n\t) {\r\n\t\tthis.bindEvents();\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate initialCheckbox: HTMLInputElement;\r\n\tprivate selectedCheckbox: HTMLInputElement;\r\n\r\n\t/* -- INSTANCE PROPERTIES ----------------------------------------------- */\r\n\tget selectedValue(): string | undefined {\r\n\t\treturn this.selectedCheckbox?.value ?? undefined;\r\n\t}\r\n\r\n\t/* -- EVENT HANDLING ---------------------------------------------------- */\r\n\tprivate bindEvents(): void {\r\n\t\tthis.base.addEventListener('change', this.onCheckboxSelected);\r\n\t}\r\n\r\n\t@bind\r\n\tprivate onCheckboxSelected(event: Event): void {\r\n\t\tconst checkbox = event.target as HTMLInputElement;\r\n\r\n\t\tif (checkbox.checked && this.selectedCheckbox) {\r\n\t\t\tthis.selectedCheckbox.checked = false;\r\n\t\t}\r\n\r\n\t\tthis.selectedCheckbox = checkbox.checked ? checkbox : null;\r\n\r\n\t\tif (this.callback) {\r\n\t\t\tthis.callback(this.selectedValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate setup(): void {\r\n\t\tthis.initialCheckbox = this.base.querySelector(selector.selectedInput);\r\n\t\tthis.selectedCheckbox = this.initialCheckbox;\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\treset(): void {\r\n\t\tif (this.selectedCheckbox === this.initialCheckbox) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.selectedCheckbox) {\r\n\t\t\tthis.selectedCheckbox.checked = false;\r\n\t\t}\r\n\r\n\t\tthis.selectedCheckbox = this.initialCheckbox;\r\n\r\n\t\tif (this.selectedCheckbox) {\r\n\t\t\tthis.selectedCheckbox.checked = true;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/* == EXPORTS =============================================================== */\r\nexport { baseSelector };\r\n","import { Shape, TurnType } from '01-global/enum';\r\nimport { Turn } from '01-global/interface';\r\nimport { bind } from '01-global/decorator/bind';\r\nimport { CheckboxGroup } from '02-components/CheckboxGroup';\r\nimport { NumberEntry } from '02-components/NumberEntry';\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst moduleName = 'turn-input';\r\nconst baseSelector = `.js-${moduleName}`;\r\nconst selector = {\r\n\tcompletedShape: `${baseSelector}__completed-shape`,\r\n\tform: `${baseSelector}__form`,\r\n\tnumberEntry: `${baseSelector}__number-entry`,\r\n\tplayedTriple: `${baseSelector}__played-triple`,\r\n\tplayedTripleContainer: `${baseSelector}__played-triple-container`,\r\n\ttilesDrawn: `${baseSelector}__drawn-tiles`\r\n};\r\n\r\n/* == CLASS ================================================================= */\r\nexport class TurnInput {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(private base: HTMLElement) {\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate completedShape: CheckboxGroup;\r\n\tprivate numberEntry: NumberEntry;\r\n\tprivate _turnType = TurnType.Default;\r\n\tprivate tilesDrawn: CheckboxGroup;\r\n\r\n\t/* -- INSTANCE PROPERTIES ----------------------------------------------- */\r\n\r\n\t/* --[ HAS-PLAYED-TRIPLE ]-- */\r\n\tprivate get hasPlayedTriple(): boolean {\r\n\t\tconst element = this.base.querySelector(\r\n\t\t\tselector.playedTriple\r\n\t\t) as HTMLInputElement;\r\n\r\n\t\treturn element === null ? false : !element.disabled && element.checked;\r\n\t}\r\n\r\n\t/* --[ TURN ]-- */\r\n\tget turn(): Turn {\r\n\t\treturn this.convertInputToObject();\r\n\t}\r\n\r\n\t/* --[ TURN-TYPE ]-- */\r\n\tget turnType(): TurnType {\r\n\t\treturn this._turnType;\r\n\t}\r\n\tset turnType(newState: TurnType) {\r\n\t\tif (newState === this._turnType) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._turnType = newState;\r\n\t\tthis.updateVisualState();\r\n\t}\r\n\r\n\t/* -- EVENT HANDLING ---------------------------------------------------- */\r\n\t@bind\r\n\tprivate onPointsChanged(value: number | undefined): void {\r\n\t\tif (this.turnType !== TurnType.RoundStart) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst element = this.base.querySelector(\r\n\t\t\tselector.playedTriple\r\n\t\t) as HTMLInputElement;\r\n\t\telement.disabled = (value ?? 0) % 3 !== 0;\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate convertInputToObject(): Turn {\r\n\t\tconst turn: Turn = {\r\n\t\t\tcompletedShape: this.completedShape.selectedValue as Shape,\r\n\t\t\tturnType: this._turnType\r\n\t\t};\r\n\r\n\t\tif (this.numberEntry.value !== undefined) {\r\n\t\t\tturn.points = this.numberEntry.value;\r\n\t\t}\r\n\r\n\t\tif (this.tilesDrawn.selectedValue) {\r\n\t\t\tturn.tilesDrawn = parseInt(this.tilesDrawn.selectedValue, 10);\r\n\t\t}\r\n\r\n\t\tif (this.hasPlayedTriple) {\r\n\t\t\tturn.isTriple = true;\r\n\t\t}\r\n\r\n\t\treturn turn;\r\n\t}\r\n\r\n\tprivate setup(): void {\r\n\t\tconst completedShape = this.base.querySelector(\r\n\t\t\tselector.completedShape\r\n\t\t) as HTMLElement;\r\n\t\tconst numberEntryBase = this.base.querySelector(\r\n\t\t\tselector.numberEntry\r\n\t\t) as HTMLElement;\r\n\t\tconst tilesDrawn = this.base.querySelector(\r\n\t\t\tselector.tilesDrawn\r\n\t\t) as HTMLElement;\r\n\r\n\t\tif (completedShape !== null) {\r\n\t\t\tthis.completedShape = new CheckboxGroup(completedShape);\r\n\t\t}\r\n\t\tif (numberEntryBase !== null) {\r\n\t\t\tthis.numberEntry = new NumberEntry(numberEntryBase, {\r\n\t\t\t\tonPointsChanged: this.onPointsChanged,\r\n\t\t\t\tselectors: {\r\n\t\t\t\t\tdisplay: '.js-number-entry__display',\r\n\t\t\t\t\tnumberPad: '.js-number-entry__number-pad'\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (tilesDrawn !== null) {\r\n\t\t\tthis.tilesDrawn = new CheckboxGroup(tilesDrawn);\r\n\t\t}\r\n\r\n\t\tthis.updateVisualState();\r\n\t}\r\n\r\n\tprivate updateVisualState(): void {\r\n\t\tif (this.completedShape) {\r\n\t\t\tthis.completedShape.base.hidden = this.turnType !== TurnType.Default;\r\n\t\t}\r\n\t\tif (this.tilesDrawn) {\r\n\t\t\tthis.tilesDrawn.base.hidden = this.turnType !== TurnType.Default;\r\n\t\t}\r\n\r\n\t\tconst playedTripleContainer = this.base.querySelector(\r\n\t\t\tselector.playedTripleContainer\r\n\t\t) as HTMLElement;\r\n\t\tif (playedTripleContainer !== null) {\r\n\t\t\tplayedTripleContainer.hidden = this.turnType !== TurnType.RoundStart;\r\n\t\t}\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\treset(): void {\r\n\t\tconst playedTriple = this.base.querySelector(\r\n\t\t\tselector.playedTriple\r\n\t\t) as HTMLInputElement;\r\n\t\tif (playedTriple) {\r\n\t\t\tplayedTriple.checked = false;\r\n\t\t}\r\n\r\n\t\tthis.completedShape?.reset();\r\n\t\tthis.numberEntry?.reset();\r\n\t\tthis.tilesDrawn?.reset();\r\n\r\n\t\tthis.numberEntry.base.scrollIntoView();\r\n\t}\r\n}\r\n\r\n/* == EXPORTS =============================================================== */\r\nexport { baseSelector };\r\n","import { Turn } from '01-global/interface';\r\nimport { TurnType } from '01-global/enum';\r\nimport { BaseController } from '02-components/BaseViewController';\r\nimport { baseSelector, TurnInput } from '02-components/TurnInput';\r\n\r\n/* == INTERFACES ============================================================ */\r\ninterface Configuration {\r\n\tonShowLeaderboard: () => void;\r\n\tonTurnSubmitted: (turnSummary: Turn) => void;\r\n}\r\n\r\n/* == CLASS ================================================================= */\r\nexport class RoundController extends BaseController {\r\n\t/* -- CONSTRUCTOR ------------------------------------------------------- */\r\n\tconstructor(readonly base: HTMLElement, private config: Configuration) {\r\n\t\tsuper(base);\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate _turnType: TurnType = TurnType.Default;\r\n\tprivate turnInput: TurnInput | null = null;\r\n\r\n\t/* -- INSTANCE PROPERTIES ----------------------------------------------- */\r\n\tprivate get turnType(): TurnType {\r\n\t\treturn this._turnType;\r\n\t}\r\n\tprivate set turnType(value: TurnType) {\r\n\t\tif (value === this._turnType) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._turnType = value;\r\n\r\n\t\tswitch (value) {\r\n\t\t\tcase TurnType.Default:\r\n\t\t\t\tthis.setTurnType(TurnType.Default);\r\n\t\t\t\tthis.header.subtitle = 'turn in progress';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase TurnType.RoundStart:\r\n\t\t\t\tthis.setTurnType(TurnType.RoundStart);\r\n\t\t\t\tthis.header.subtitle = 'initial turn';\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/* -- EVENT HANDLING ---------------------------------------------------- */\r\n\tprotected onPrimaryAction(): void {\r\n\t\tconst turn = this.turnInput?.turn;\r\n\t\tthis.config.onTurnSubmitted?.(turn);\r\n\t}\r\n\r\n\tprotected onSecondaryAction(): void {\r\n\t\tthis.config.onShowLeaderboard?.();\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate reset(): void {\r\n\t\tthis.turnInput?.reset();\r\n\t}\r\n\r\n\tprivate setTurnType(turnType: TurnType): void {\r\n\t\tif (this.turnInput === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.turnInput.turnType = turnType;\r\n\t}\r\n\r\n\tprivate setup(): void {\r\n\t\tconst turnBase = this.base.querySelector(baseSelector) as HTMLElement;\r\n\t\tif (baseSelector !== null) {\r\n\t\t\tthis.turnInput = new TurnInput(turnBase);\r\n\t\t}\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\tplay(turnType: TurnType, playerName: string): void {\r\n\t\tthis.header.title = playerName;\r\n\t\tthis.turnType = turnType;\r\n\t\tthis.reset();\r\n\t}\r\n}\r\n","import { bind } from '01-global/decorator/bind';\r\nimport { ManagedViewController, Turn } from '01-global/interface';\r\nimport { RoundStatus, TurnType } from '01-global/enum';\r\n\r\nimport { PlayerManager } from '01-global/manager/PlayerManager';\r\n\r\nimport { RoundController as RoundViewController } from '03-domain/view-controller/TurnController';\r\n\r\n/* == CONSTANTS ============================================================= */\r\nconst playerManager = PlayerManager.instance;\r\n\r\n/* == INTERFACES ============================================================ */\r\ninterface Configuration {\r\n\tonShowLeaderboard: () => void;\r\n\tonTurnSubmitted: (report: TurnReport) => void;\r\n}\r\n\r\nexport interface TurnReport extends Turn {\r\n\tstate: RoundStatus;\r\n}\r\n\r\n/* == PUBLIC METHODS ======================================================== */\r\nexport class RoundController implements ManagedViewController {\r\n\tconstructor(readonly base: HTMLElement, private config: Configuration) {\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\t/* -- FIELDS ------------------------------------------------------------ */\r\n\tprivate _viewController?: RoundViewController;\r\n\tprivate maxPassedTurnStreak = 0;\r\n\tprivate passedTurnStreak = 0;\r\n\tprivate status: RoundStatus = RoundStatus.InProgress;\r\n\r\n\t/* -- INSTANCE PROPERTIES ----------------------------------------------- */\r\n\tprivate get canProceedToNextPlayer(): boolean {\r\n\t\treturn (\r\n\t\t\tthis.status === RoundStatus.InProgress &&\r\n\t\t\t!playerManager.activePlayer?.hasEmptyHand &&\r\n\t\t\tthis.passedTurnStreak < this.maxPassedTurnStreak\r\n\t\t);\r\n\t}\r\n\r\n\tget isVisible(): boolean {\r\n\t\treturn this._viewController?.isVisible ?? false;\r\n\t}\r\n\tset isVisible(value: boolean) {\r\n\t\tif (this._viewController === undefined) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._viewController.isVisible = value;\r\n\t}\r\n\r\n\tpublic get viewController(): RoundViewController | undefined {\r\n\t\treturn this._viewController;\r\n\t}\r\n\r\n\t/* -- EVENT HANDLING ---------------------------------------------------- */\r\n\t@bind\r\n\tprivate onShowLeaderboard(): void {\r\n\t\tthis.config.onShowLeaderboard?.();\r\n\t}\r\n\r\n\t@bind\r\n\tprivate onTurnSubmitted(turn: Turn): void {\r\n\t\tthis.processTurn(turn);\r\n\t\tthis.determineStatus();\r\n\r\n\t\tthis.config.onTurnSubmitted?.({\r\n\t\t\t...turn,\r\n\t\t\tstate: this.status\r\n\t\t});\r\n\t}\r\n\r\n\t/* -- PRIVATE METHODS --------------------------------------------------- */\r\n\tprivate determineStatus(): void {\r\n\t\tif (this.passedTurnStreak === this.maxPassedTurnStreak) {\r\n\t\t\tthis.status = RoundStatus.Locked;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate goToNextPlayer(): boolean {\r\n\t\tif (!this.canProceedToNextPlayer) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tplayerManager.activateNextPlayer();\r\n\t\tthis._viewController?.play(\r\n\t\t\tTurnType.Default,\r\n\t\t\tplayerManager.activePlayer?.name ?? ''\r\n\t\t);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprivate processTurn(turn: Turn) {\r\n\t\tif (turn.points === undefined) {\r\n\t\t\tthis.passedTurnStreak++;\r\n\t\t} else {\r\n\t\t\tthis.passedTurnStreak = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate setup() {\r\n\t\tthis._viewController = new RoundViewController(this.base, {\r\n\t\t\tonShowLeaderboard: this.onShowLeaderboard,\r\n\t\t\tonTurnSubmitted: this.onTurnSubmitted\r\n\t\t});\r\n\t}\r\n\r\n\t/* -- PUBLIC METHODS ---------------------------------------------------- */\r\n\tcontinueRound(): boolean {\r\n\t\treturn this.goToNextPlayer();\r\n\t}\r\n\r\n\tstartRound(numberOfPlayers: number): void {\r\n\t\tthis.maxPassedTurnStreak = numberOfPlayers;\r\n\t\tthis.passedTurnStreak = 0;\r\n\t\tthis.status = RoundStatus.InProgress;\r\n\r\n\t\tthis.viewController?.play(\r\n\t\t\tTurnType.RoundStart,\r\n\t\t\tplayerManager.activePlayer?.name ?? ''\r\n\t\t);\r\n\t}\r\n}\r\n","import { RoundStatus, StepId } from '01-global/enum';\r\nimport {\r\n\tManagedViewController,\r\n\tPlayerSummary,\r\n\tRemainingPoints,\r\n\tTurnSummary\r\n} from '01-global/interface';\r\n\r\nimport { NavigationManager, Step } from '01-global/manager/NavigationManager';\r\nimport { PlayerManager } from '01-global/manager/PlayerManager';\r\nimport { getInitialTileCount, getRoundBonus } from '01-global/utility/rules';\r\nimport { awardRemainingPoints, scoreTurn } from '01-global/utility/scoring';\r\n\r\nimport { GameStartController } from '03-domain/view-controller/GameStartController';\r\nimport { LeaderboardController } from '03-domain/view-controller/LeaderboardController';\r\nimport { LeaderboardFlyInController } from '03-domain/view-controller/LeaderboardFlyInController';\r\nimport { PlayerSelectController } from '03-domain/view-controller/PlayerSelectController';\r\nimport { PointCollectionController } from '03-domain/view-controller/PointCollectionController';\r\nimport { PointLimitController } from '03-domain/view-controller/PointLimitController';\r\n\r\nimport {\r\n\tshowGameWinnerDialog,\r\n\tshowLastRoundDialog,\r\n\tshowRoundWinnerDialog,\r\n\tshowTurnPlayedDialog\r\n} from '03-domain/dialog';\r\nimport { RoundController, TurnReport } from '03-domain/round-controller';\r\n\r\n/* == INTERFACES ============================================================ */\r\ninterface Configuration {\r\n\tleaderBoardFlyOut?: LeaderboardFlyInController;\r\n\tlimitReached: boolean;\r\n\tpointsLimit: number;\r\n\tround: number;\r\n\tstartingPlayer: PlayerSummary | null;\r\n}\r\n\r\n/* == CONST ================================================================= */\r\nconst config: Configuration = {\r\n\tlimitReached: false,\r\n\tpointsLimit: 0,\r\n\tround: 1,\r\n\tstartingPlayer: null\r\n};\r\nconst playerManager = PlayerManager.instance;\r\nconst navigationManager = new NavigationManager(\r\n\t[\r\n\t\t{ id: StepId.Names },\r\n\t\t{ id: StepId.PointsLimit },\r\n\t\t{ id: StepId.PlayerSelect },\r\n\t\t{ id: StepId.Round },\r\n\t\t{ id: StepId.Collection },\r\n\t\t{ id: StepId.Leaderboard }\r\n\t],\r\n\t{\r\n\t\tinstanceFactory,\r\n\t\tonInstanceActivated\r\n\t}\r\n);\r\n\r\n/* == CALLBACKS ============================================================= */\r\nfunction onCancel(): void {\r\n\tnavigationManager.goBack();\r\n}\r\n\r\nfunction onInstanceActivated(step: Step): void {\r\n\tswitch (step.id) {\r\n\t\tcase StepId.Collection:\r\n\t\t\t(step.instance as PointCollectionController).setPlayers(\r\n\t\t\t\tplayerManager.players\r\n\t\t\t);\r\n\t\t\tbreak;\r\n\r\n\t\tcase StepId.Leaderboard:\r\n\t\t\t(step.instance as LeaderboardController).showLeaderboard(\r\n\t\t\t\tplayerManager.players\r\n\t\t\t);\r\n\t\t\tbreak;\r\n\r\n\t\tcase StepId.PlayerSelect:\r\n\t\t\tpreparePlayerSelect(step.instance as PlayerSelectController);\r\n\t\t\tbreak;\r\n\r\n\t\tcase StepId.PointsLimit:\r\n\t\t\t(step.instance as PointLimitController).reset();\r\n\t\t\tbreak;\r\n\r\n\t\tcase StepId.Round:\r\n\t\t\t(step.instance as RoundController).startRound(playerManager.numberOfPlayers);\r\n\t\t\tbreak;\r\n\t}\r\n}\r\n\r\nfunction onPlayersSelected(names: string[]): void {\r\n\tconst tilesPerRound = getInitialTileCount(names.length);\r\n\r\n\tplayerManager.createPlayers(names, tilesPerRound);\r\n\tnavigationManager.goForward();\r\n}\r\n\r\nfunction onPointsCollected(result: RemainingPoints[]): void {\r\n\tconst winner = awardRemainingPoints(result);\r\n\tconst name =\r\n\t\tplayerManager.players.find(player => player.id === winner.id)?.name ?? '';\r\n\r\n\tplayerManager.updatePlayerScore(winner.id, winner.points);\r\n\r\n\tshowRoundWinnerDialog(winner.points, name, onRoundWinnerDialogClosed);\r\n\tconfig.round++;\r\n}\r\n\r\nfunction onPointLimitSet(points: number): void {\r\n\tconfig.pointsLimit = points;\r\n\tconfig.limitReached = false;\r\n\tnavigationManager.goForward();\r\n}\r\n\r\nfunction onRoundWinnerDialogClosed(): void {\r\n\tif (config.limitReached) {\r\n\t\tconst winner = playerManager.firstRankedPlayer;\r\n\r\n\t\tsetTimeout(\r\n\t\t\t() => showGameWinnerDialog(winner, () => navigationManager.goForward()),\r\n\t\t\t0\r\n\t\t);\r\n\t} else {\r\n\t\tnavigationManager.goTo(StepId.PlayerSelect);\r\n\t}\r\n}\r\n\r\nfunction onStartingPlayerSecondaryAction(): void {\r\n\tif (isFirstRound()) {\r\n\t\tnavigationManager.goBack();\r\n\t} else {\r\n\t\tshowLeaderboardFlyin();\r\n\t}\r\n}\r\n\r\nfunction onStartingPlayerSelected(player: PlayerSummary): void {\r\n\tconfig.startingPlayer = player;\r\n\tplayerManager.setActivePlayer(player.id);\r\n\tplayerManager.resetTileCount();\r\n\r\n\tnavigationManager.goForward();\r\n}\r\n\r\nfunction onTurnSubmitted(report: TurnReport): void {\r\n\tconst summary = addScoreForActivePlayer(report);\r\n\r\n\tif (playerManager.activePlayer?.hasEmptyHand) {\r\n\t\tnavigationManager.goForward();\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst canShowLimitDialog = !config.limitReached;\r\n\tconst activePlayer = playerManager.activePlayer as PlayerSummary;\r\n\tconfig.limitReached ||=\r\n\t\t(playerManager.activePlayer?.score ?? 0) >= config.pointsLimit;\r\n\tconst onClose =\r\n\t\tcanShowLimitDialog && config.limitReached\r\n\t\t\t? () => onTurnPlayedDialogClosed(activePlayer)\r\n\t\t\t: playNextTurn;\r\n\r\n\tshowTurnPlayedDialog(activePlayer, summary.scoreDelta, onClose);\r\n}\r\n\r\nfunction onTurnPlayedDialogClosed(currentPlayer: PlayerSummary): void {\r\n\tsetTimeout(\r\n\t\t() =>\r\n\t\t\tshowLastRoundDialog(currentPlayer.name, config.pointsLimit, playNextTurn),\r\n\t\t0\r\n\t);\r\n}\r\n\r\nfunction onStartNewGame(): void {\r\n\tnavigationManager.goTo(StepId.Names);\r\n}\r\n\r\n/* == PRIVATE METHODS ======================================================= */\r\nfunction addScoreForActivePlayer(report: TurnReport): TurnSummary {\r\n\tconst turnSummary = scoreTurn(report);\r\n\r\n\tplayerManager.updateActivePlayerScore(turnSummary.scoreDelta);\r\n\tplayerManager.updateActivePlayerTileCount(turnSummary.tileDelta);\r\n\r\n\tif (report.state === RoundStatus.Won) {\r\n\t\tplayerManager.updateActivePlayerScore(getRoundBonus());\r\n\t}\r\n\r\n\treturn turnSummary;\r\n}\r\n/* eslint-disable complexity */\r\nfunction instanceFactory(id: string): ManagedViewController | null {\r\n\tswitch (id) {\r\n\t\tcase StepId.Collection:\r\n\t\t\treturn initCollectionController();\r\n\r\n\t\tcase StepId.Leaderboard:\r\n\t\t\treturn initLeaderboardController();\r\n\r\n\t\tcase StepId.Names:\r\n\t\t\treturn initGameStartController();\r\n\r\n\t\tcase StepId.PlayerSelect:\r\n\t\t\treturn initPlayerSelectController();\r\n\r\n\t\tcase StepId.PointsLimit:\r\n\t\t\treturn initPointLimitController();\r\n\r\n\t\tcase StepId.Round:\r\n\t\t\treturn initRoundController();\r\n\r\n\t\tdefault:\r\n\t\t\treturn null;\r\n\t}\r\n}\r\n/* eslint-enable complexity */\r\n\r\nfunction isFirstRound(): boolean {\r\n\treturn config.round === 1;\r\n}\r\n\r\nfunction showLeaderboardFlyin(showTiles = false): void {\r\n\tconfig.leaderBoardFlyOut?.showLeaderboard(playerManager.players, showTiles);\r\n}\r\n\r\n/* == INIT ================================================================== */\r\nfunction playNextTurn(): void {\r\n\tconst activeStep = navigationManager.activeStep;\r\n\tif (activeStep === undefined || activeStep.instance === undefined) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t(activeStep.instance as RoundController).continueRound();\r\n}\r\n\r\nfunction init(): void {\r\n\tconst leaderboardFlyoutBase = document.querySelector(\r\n\t\t'.js-leaderboard-fly-out'\r\n\t) as HTMLElement;\r\n\r\n\tif (leaderboardFlyoutBase !== null) {\r\n\t\tconfig.leaderBoardFlyOut = new LeaderboardFlyInController(\r\n\t\t\tleaderboardFlyoutBase,\r\n\t\t\t{\r\n\t\t\t\tselectors: {\r\n\t\t\t\t\tbackground: 'main',\r\n\t\t\t\t\tboard: '.js-leaderboard-fly-out__leaderboard',\r\n\t\t\t\t\tcloseTrigger: '.js-leaderboard-fly-out__close'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction initCollectionController(): PointCollectionController | null {\r\n\tconst base = document.querySelector('.js-point-collection') as HTMLElement;\r\n\r\n\treturn base === null\r\n\t\t? null\r\n\t\t: new PointCollectionController(base, {\r\n\t\t\t\tflyInBackground: document.querySelector('main') ?? undefined,\r\n\t\t\t\tisVisible: false,\r\n\t\t\t\tonPointsCollected: onPointsCollected,\r\n\t\t\t\tselectors: {\r\n\t\t\t\t\tcancelSetPoints: '.js-point-collection__cancel-points',\r\n\t\t\t\t\tflyOut: '.js-point-collection__fly-out',\r\n\t\t\t\t\tflyInPortal: '#fly-in-portal',\r\n\t\t\t\t\tflyInTitle: '.js-point-collection__fly-out-title',\r\n\t\t\t\t\tnumberEntry: '.js-point-collection__number-entry',\r\n\t\t\t\t\tplayerList: '.js-point-collection__list',\r\n\t\t\t\t\tsetPoints: '.js-point-collection__set-points'\r\n\t\t\t\t},\r\n\t\t\t\twarningId: 'warning-points-missing'\r\n\t\t  });\r\n}\r\n\r\nfunction initGameStartController(): GameStartController | null {\r\n\tconst base = document.querySelector('.js-game-start') as HTMLElement;\r\n\r\n\treturn base\r\n\t\t? new GameStartController(base, {\r\n\t\t\t\tonPlayersSelected: onPlayersSelected,\r\n\t\t\t\tselectors: {\r\n\t\t\t\t\tform: ''\r\n\t\t\t\t},\r\n\t\t\t\twarningId: 'warning-required-players'\r\n\t\t  })\r\n\t\t: null;\r\n}\r\n\r\nfunction initLeaderboardController(): LeaderboardController | null {\r\n\tconst base = document.querySelector('.js-leaderboard') as HTMLElement;\r\n\r\n\treturn base === null\r\n\t\t? null\r\n\t\t: new LeaderboardController(base, {\r\n\t\t\t\tonStartNewGame,\r\n\t\t\t\tselectors: {\r\n\t\t\t\t\tboard: '.js-leaderboard__board'\r\n\t\t\t\t}\r\n\t\t  });\r\n}\r\n\r\nfunction initPointLimitController(): PointLimitController | null {\r\n\tconst base = document.querySelector('.js-point-limit') as HTMLElement;\r\n\r\n\treturn base === null\r\n\t\t? null\r\n\t\t: new PointLimitController(base, {\r\n\t\t\t\tdefaultPoints: 400,\r\n\t\t\t\tisVisible: false,\r\n\t\t\t\tonCancel,\r\n\t\t\t\tonLimitSet: onPointLimitSet,\r\n\t\t\t\tpointsValidation: {\r\n\t\t\t\t\tminimum: 100,\r\n\t\t\t\t\tmaximum: 1000,\r\n\t\t\t\t\twarningId: 'warning-invalid-points-limit'\r\n\t\t\t\t},\r\n\t\t\t\tselectors: {\r\n\t\t\t\t\tnumberEntry: '.js-point-limit__number-entry'\r\n\t\t\t\t}\r\n\t\t  });\r\n}\r\n\r\nfunction initPlayerSelectController(): PlayerSelectController | null {\r\n\tconst base = document.querySelector('.js-player-select') as HTMLElement;\r\n\r\n\treturn base === null\r\n\t\t? null\r\n\t\t: new PlayerSelectController(base, {\r\n\t\t\t\tisVisible: false,\r\n\t\t\t\tonCancel: onStartingPlayerSecondaryAction,\r\n\t\t\t\tonPlayerSelected: onStartingPlayerSelected,\r\n\t\t\t\tselectors: {\r\n\t\t\t\t\tnameList: '.js-player-select__list'\r\n\t\t\t\t},\r\n\t\t\t\twarningId: 'warning-select-starting-player'\r\n\t\t  });\r\n}\r\n\r\nfunction initRoundController(): RoundController | null {\r\n\tconst base = document.querySelector('.js-round') as HTMLElement;\r\n\r\n\treturn base === null\r\n\t\t? null\r\n\t\t: new RoundController(base, {\r\n\t\t\t\tonShowLeaderboard: () => showLeaderboardFlyin(true),\r\n\t\t\t\tonTurnSubmitted: onTurnSubmitted\r\n\t\t  });\r\n}\r\n\r\nfunction preparePlayerSelect(instance: PlayerSelectController): void {\r\n\tinstance.setPlayers(playerManager.players);\r\n\tinstance.secondaryActionTitle = isFirstRound() ? 'Back' : 'Leaderboard';\r\n\tinstance.round = config.round;\r\n}\r\n\r\ninit();\r\n"],"sourceRoot":""}